
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Passenger
 * 
 */
export type Passenger = $Result.DefaultSelection<Prisma.$PassengerPayload>
/**
 * Model Pack
 * 
 */
export type Pack = $Result.DefaultSelection<Prisma.$PackPayload>
/**
 * Model BusAssignment
 * 
 */
export type BusAssignment = $Result.DefaultSelection<Prisma.$BusAssignmentPayload>
/**
 * Model FinalConfirmation
 * 
 */
export type FinalConfirmation = $Result.DefaultSelection<Prisma.$FinalConfirmationPayload>
/**
 * Model SmsHistory
 * 
 */
export type SmsHistory = $Result.DefaultSelection<Prisma.$SmsHistoryPayload>
/**
 * Model PackHistory
 * 
 */
export type PackHistory = $Result.DefaultSelection<Prisma.$PackHistoryPayload>
/**
 * Model ArchivedPack
 * 
 */
export type ArchivedPack = $Result.DefaultSelection<Prisma.$ArchivedPackPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PackType: {
  normal: 'normal',
  vip: 'vip'
};

export type PackType = (typeof PackType)[keyof typeof PackType]


export const PackStatus: {
  pending: 'pending',
  assigned: 'assigned',
  confirmed: 'confirmed'
};

export type PackStatus = (typeof PackStatus)[keyof typeof PackStatus]

}

export type PackType = $Enums.PackType

export const PackType: typeof $Enums.PackType

export type PackStatus = $Enums.PackStatus

export const PackStatus: typeof $Enums.PackStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passenger`: Exposes CRUD operations for the **Passenger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passengers
    * const passengers = await prisma.passenger.findMany()
    * ```
    */
  get passenger(): Prisma.PassengerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pack`: Exposes CRUD operations for the **Pack** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packs
    * const packs = await prisma.pack.findMany()
    * ```
    */
  get pack(): Prisma.PackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.busAssignment`: Exposes CRUD operations for the **BusAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusAssignments
    * const busAssignments = await prisma.busAssignment.findMany()
    * ```
    */
  get busAssignment(): Prisma.BusAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.finalConfirmation`: Exposes CRUD operations for the **FinalConfirmation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinalConfirmations
    * const finalConfirmations = await prisma.finalConfirmation.findMany()
    * ```
    */
  get finalConfirmation(): Prisma.FinalConfirmationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.smsHistory`: Exposes CRUD operations for the **SmsHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SmsHistories
    * const smsHistories = await prisma.smsHistory.findMany()
    * ```
    */
  get smsHistory(): Prisma.SmsHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.packHistory`: Exposes CRUD operations for the **PackHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackHistories
    * const packHistories = await prisma.packHistory.findMany()
    * ```
    */
  get packHistory(): Prisma.PackHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.archivedPack`: Exposes CRUD operations for the **ArchivedPack** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchivedPacks
    * const archivedPacks = await prisma.archivedPack.findMany()
    * ```
    */
  get archivedPack(): Prisma.ArchivedPackDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Passenger: 'Passenger',
    Pack: 'Pack',
    BusAssignment: 'BusAssignment',
    FinalConfirmation: 'FinalConfirmation',
    SmsHistory: 'SmsHistory',
    PackHistory: 'PackHistory',
    ArchivedPack: 'ArchivedPack'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "passenger" | "pack" | "busAssignment" | "finalConfirmation" | "smsHistory" | "packHistory" | "archivedPack"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Passenger: {
        payload: Prisma.$PassengerPayload<ExtArgs>
        fields: Prisma.PassengerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassengerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassengerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>
          }
          findFirst: {
            args: Prisma.PassengerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassengerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>
          }
          findMany: {
            args: Prisma.PassengerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>[]
          }
          create: {
            args: Prisma.PassengerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>
          }
          createMany: {
            args: Prisma.PassengerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PassengerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>[]
          }
          delete: {
            args: Prisma.PassengerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>
          }
          update: {
            args: Prisma.PassengerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>
          }
          deleteMany: {
            args: Prisma.PassengerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PassengerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PassengerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>[]
          }
          upsert: {
            args: Prisma.PassengerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassengerPayload>
          }
          aggregate: {
            args: Prisma.PassengerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePassenger>
          }
          groupBy: {
            args: Prisma.PassengerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PassengerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassengerCountArgs<ExtArgs>
            result: $Utils.Optional<PassengerCountAggregateOutputType> | number
          }
        }
      }
      Pack: {
        payload: Prisma.$PackPayload<ExtArgs>
        fields: Prisma.PackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>
          }
          findFirst: {
            args: Prisma.PackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>
          }
          findMany: {
            args: Prisma.PackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>[]
          }
          create: {
            args: Prisma.PackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>
          }
          createMany: {
            args: Prisma.PackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>[]
          }
          delete: {
            args: Prisma.PackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>
          }
          update: {
            args: Prisma.PackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>
          }
          deleteMany: {
            args: Prisma.PackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>[]
          }
          upsert: {
            args: Prisma.PackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackPayload>
          }
          aggregate: {
            args: Prisma.PackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePack>
          }
          groupBy: {
            args: Prisma.PackGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackCountArgs<ExtArgs>
            result: $Utils.Optional<PackCountAggregateOutputType> | number
          }
        }
      }
      BusAssignment: {
        payload: Prisma.$BusAssignmentPayload<ExtArgs>
        fields: Prisma.BusAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>
          }
          findFirst: {
            args: Prisma.BusAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>
          }
          findMany: {
            args: Prisma.BusAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>[]
          }
          create: {
            args: Prisma.BusAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>
          }
          createMany: {
            args: Prisma.BusAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>[]
          }
          delete: {
            args: Prisma.BusAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>
          }
          update: {
            args: Prisma.BusAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.BusAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.BusAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusAssignmentPayload>
          }
          aggregate: {
            args: Prisma.BusAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusAssignment>
          }
          groupBy: {
            args: Prisma.BusAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<BusAssignmentCountAggregateOutputType> | number
          }
        }
      }
      FinalConfirmation: {
        payload: Prisma.$FinalConfirmationPayload<ExtArgs>
        fields: Prisma.FinalConfirmationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinalConfirmationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinalConfirmationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>
          }
          findFirst: {
            args: Prisma.FinalConfirmationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinalConfirmationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>
          }
          findMany: {
            args: Prisma.FinalConfirmationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>[]
          }
          create: {
            args: Prisma.FinalConfirmationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>
          }
          createMany: {
            args: Prisma.FinalConfirmationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinalConfirmationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>[]
          }
          delete: {
            args: Prisma.FinalConfirmationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>
          }
          update: {
            args: Prisma.FinalConfirmationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>
          }
          deleteMany: {
            args: Prisma.FinalConfirmationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinalConfirmationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinalConfirmationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>[]
          }
          upsert: {
            args: Prisma.FinalConfirmationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalConfirmationPayload>
          }
          aggregate: {
            args: Prisma.FinalConfirmationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinalConfirmation>
          }
          groupBy: {
            args: Prisma.FinalConfirmationGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinalConfirmationGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinalConfirmationCountArgs<ExtArgs>
            result: $Utils.Optional<FinalConfirmationCountAggregateOutputType> | number
          }
        }
      }
      SmsHistory: {
        payload: Prisma.$SmsHistoryPayload<ExtArgs>
        fields: Prisma.SmsHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SmsHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SmsHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>
          }
          findFirst: {
            args: Prisma.SmsHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SmsHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>
          }
          findMany: {
            args: Prisma.SmsHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>[]
          }
          create: {
            args: Prisma.SmsHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>
          }
          createMany: {
            args: Prisma.SmsHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SmsHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>[]
          }
          delete: {
            args: Prisma.SmsHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>
          }
          update: {
            args: Prisma.SmsHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>
          }
          deleteMany: {
            args: Prisma.SmsHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SmsHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SmsHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>[]
          }
          upsert: {
            args: Prisma.SmsHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SmsHistoryPayload>
          }
          aggregate: {
            args: Prisma.SmsHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSmsHistory>
          }
          groupBy: {
            args: Prisma.SmsHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SmsHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SmsHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<SmsHistoryCountAggregateOutputType> | number
          }
        }
      }
      PackHistory: {
        payload: Prisma.$PackHistoryPayload<ExtArgs>
        fields: Prisma.PackHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>
          }
          findFirst: {
            args: Prisma.PackHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>
          }
          findMany: {
            args: Prisma.PackHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>[]
          }
          create: {
            args: Prisma.PackHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>
          }
          createMany: {
            args: Prisma.PackHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>[]
          }
          delete: {
            args: Prisma.PackHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>
          }
          update: {
            args: Prisma.PackHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PackHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>[]
          }
          upsert: {
            args: Prisma.PackHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackHistoryPayload>
          }
          aggregate: {
            args: Prisma.PackHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackHistory>
          }
          groupBy: {
            args: Prisma.PackHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PackHistoryCountAggregateOutputType> | number
          }
        }
      }
      ArchivedPack: {
        payload: Prisma.$ArchivedPackPayload<ExtArgs>
        fields: Prisma.ArchivedPackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchivedPackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchivedPackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>
          }
          findFirst: {
            args: Prisma.ArchivedPackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchivedPackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>
          }
          findMany: {
            args: Prisma.ArchivedPackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>[]
          }
          create: {
            args: Prisma.ArchivedPackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>
          }
          createMany: {
            args: Prisma.ArchivedPackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArchivedPackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>[]
          }
          delete: {
            args: Prisma.ArchivedPackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>
          }
          update: {
            args: Prisma.ArchivedPackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>
          }
          deleteMany: {
            args: Prisma.ArchivedPackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchivedPackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ArchivedPackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>[]
          }
          upsert: {
            args: Prisma.ArchivedPackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedPackPayload>
          }
          aggregate: {
            args: Prisma.ArchivedPackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchivedPack>
          }
          groupBy: {
            args: Prisma.ArchivedPackGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchivedPackGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchivedPackCountArgs<ExtArgs>
            result: $Utils.Optional<ArchivedPackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    passenger?: PassengerOmit
    pack?: PackOmit
    busAssignment?: BusAssignmentOmit
    finalConfirmation?: FinalConfirmationOmit
    smsHistory?: SmsHistoryOmit
    packHistory?: PackHistoryOmit
    archivedPack?: ArchivedPackOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    passengers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passengers?: boolean | UserCountOutputTypeCountPassengersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPassengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassengerWhereInput
  }


  /**
   * Count Type PassengerCountOutputType
   */

  export type PassengerCountOutputType = {
    busAssignment: number
  }

  export type PassengerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    busAssignment?: boolean | PassengerCountOutputTypeCountBusAssignmentArgs
  }

  // Custom InputTypes
  /**
   * PassengerCountOutputType without action
   */
  export type PassengerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassengerCountOutputType
     */
    select?: PassengerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PassengerCountOutputType without action
   */
  export type PassengerCountOutputTypeCountBusAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusAssignmentWhereInput
  }


  /**
   * Count Type PackCountOutputType
   */

  export type PackCountOutputType = {
    passengers: number
    history: number
    smsHistory: number
  }

  export type PackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passengers?: boolean | PackCountOutputTypeCountPassengersArgs
    history?: boolean | PackCountOutputTypeCountHistoryArgs
    smsHistory?: boolean | PackCountOutputTypeCountSmsHistoryArgs
  }

  // Custom InputTypes
  /**
   * PackCountOutputType without action
   */
  export type PackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackCountOutputType
     */
    select?: PackCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackCountOutputType without action
   */
  export type PackCountOutputTypeCountPassengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassengerWhereInput
  }

  /**
   * PackCountOutputType without action
   */
  export type PackCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackHistoryWhereInput
  }

  /**
   * PackCountOutputType without action
   */
  export type PackCountOutputTypeCountSmsHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SmsHistoryWhereInput
  }


  /**
   * Count Type BusAssignmentCountOutputType
   */

  export type BusAssignmentCountOutputType = {
    passengers: number
  }

  export type BusAssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passengers?: boolean | BusAssignmentCountOutputTypeCountPassengersArgs
  }

  // Custom InputTypes
  /**
   * BusAssignmentCountOutputType without action
   */
  export type BusAssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignmentCountOutputType
     */
    select?: BusAssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BusAssignmentCountOutputType without action
   */
  export type BusAssignmentCountOutputTypeCountPassengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassengerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    role: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    passengers?: boolean | User$passengersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "role" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passengers?: boolean | User$passengersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      passengers: Prisma.$PassengerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      role: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passengers<T extends User$passengersArgs<ExtArgs> = {}>(args?: Subset<T, User$passengersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.passengers
   */
  export type User$passengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    where?: PassengerWhereInput
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    cursor?: PassengerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassengerScalarFieldEnum | PassengerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Passenger
   */

  export type AggregatePassenger = {
    _count: PassengerCountAggregateOutputType | null
    _avg: PassengerAvgAggregateOutputType | null
    _sum: PassengerSumAggregateOutputType | null
    _min: PassengerMinAggregateOutputType | null
    _max: PassengerMaxAggregateOutputType | null
  }

  export type PassengerAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
    packId: number | null
  }

  export type PassengerSumAggregateOutputType = {
    id: number | null
    createdById: number | null
    packId: number | null
  }

  export type PassengerMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    gender: string | null
    phone: string | null
    nationalCode: string | null
    travelDate: string | null
    returnDate: string | null
    birthDate: string | null
    travelType: string | null
    leaderName: string | null
    leaderPhone: string | null
    createdById: number | null
    packId: number | null
    createdAt: Date | null
  }

  export type PassengerMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    gender: string | null
    phone: string | null
    nationalCode: string | null
    travelDate: string | null
    returnDate: string | null
    birthDate: string | null
    travelType: string | null
    leaderName: string | null
    leaderPhone: string | null
    createdById: number | null
    packId: number | null
    createdAt: Date | null
  }

  export type PassengerCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    gender: number
    phone: number
    nationalCode: number
    travelDate: number
    returnDate: number
    birthDate: number
    travelType: number
    leaderName: number
    leaderPhone: number
    createdById: number
    packId: number
    createdAt: number
    _all: number
  }


  export type PassengerAvgAggregateInputType = {
    id?: true
    createdById?: true
    packId?: true
  }

  export type PassengerSumAggregateInputType = {
    id?: true
    createdById?: true
    packId?: true
  }

  export type PassengerMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    gender?: true
    phone?: true
    nationalCode?: true
    travelDate?: true
    returnDate?: true
    birthDate?: true
    travelType?: true
    leaderName?: true
    leaderPhone?: true
    createdById?: true
    packId?: true
    createdAt?: true
  }

  export type PassengerMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    gender?: true
    phone?: true
    nationalCode?: true
    travelDate?: true
    returnDate?: true
    birthDate?: true
    travelType?: true
    leaderName?: true
    leaderPhone?: true
    createdById?: true
    packId?: true
    createdAt?: true
  }

  export type PassengerCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    gender?: true
    phone?: true
    nationalCode?: true
    travelDate?: true
    returnDate?: true
    birthDate?: true
    travelType?: true
    leaderName?: true
    leaderPhone?: true
    createdById?: true
    packId?: true
    createdAt?: true
    _all?: true
  }

  export type PassengerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passenger to aggregate.
     */
    where?: PassengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passengers to fetch.
     */
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passengers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Passengers
    **/
    _count?: true | PassengerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassengerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassengerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassengerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassengerMaxAggregateInputType
  }

  export type GetPassengerAggregateType<T extends PassengerAggregateArgs> = {
        [P in keyof T & keyof AggregatePassenger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassenger[P]>
      : GetScalarType<T[P], AggregatePassenger[P]>
  }




  export type PassengerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassengerWhereInput
    orderBy?: PassengerOrderByWithAggregationInput | PassengerOrderByWithAggregationInput[]
    by: PassengerScalarFieldEnum[] | PassengerScalarFieldEnum
    having?: PassengerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassengerCountAggregateInputType | true
    _avg?: PassengerAvgAggregateInputType
    _sum?: PassengerSumAggregateInputType
    _min?: PassengerMinAggregateInputType
    _max?: PassengerMaxAggregateInputType
  }

  export type PassengerGroupByOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate: string | null
    birthDate: string
    travelType: string
    leaderName: string | null
    leaderPhone: string | null
    createdById: number
    packId: number | null
    createdAt: Date
    _count: PassengerCountAggregateOutputType | null
    _avg: PassengerAvgAggregateOutputType | null
    _sum: PassengerSumAggregateOutputType | null
    _min: PassengerMinAggregateOutputType | null
    _max: PassengerMaxAggregateOutputType | null
  }

  type GetPassengerGroupByPayload<T extends PassengerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassengerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassengerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassengerGroupByOutputType[P]>
            : GetScalarType<T[P], PassengerGroupByOutputType[P]>
        }
      >
    >


  export type PassengerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    phone?: boolean
    nationalCode?: boolean
    travelDate?: boolean
    returnDate?: boolean
    birthDate?: boolean
    travelType?: boolean
    leaderName?: boolean
    leaderPhone?: boolean
    createdById?: boolean
    packId?: boolean
    createdAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    pack?: boolean | Passenger$packArgs<ExtArgs>
    busAssignment?: boolean | Passenger$busAssignmentArgs<ExtArgs>
    _count?: boolean | PassengerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passenger"]>

  export type PassengerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    phone?: boolean
    nationalCode?: boolean
    travelDate?: boolean
    returnDate?: boolean
    birthDate?: boolean
    travelType?: boolean
    leaderName?: boolean
    leaderPhone?: boolean
    createdById?: boolean
    packId?: boolean
    createdAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    pack?: boolean | Passenger$packArgs<ExtArgs>
  }, ExtArgs["result"]["passenger"]>

  export type PassengerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    phone?: boolean
    nationalCode?: boolean
    travelDate?: boolean
    returnDate?: boolean
    birthDate?: boolean
    travelType?: boolean
    leaderName?: boolean
    leaderPhone?: boolean
    createdById?: boolean
    packId?: boolean
    createdAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    pack?: boolean | Passenger$packArgs<ExtArgs>
  }, ExtArgs["result"]["passenger"]>

  export type PassengerSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    phone?: boolean
    nationalCode?: boolean
    travelDate?: boolean
    returnDate?: boolean
    birthDate?: boolean
    travelType?: boolean
    leaderName?: boolean
    leaderPhone?: boolean
    createdById?: boolean
    packId?: boolean
    createdAt?: boolean
  }

  export type PassengerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "gender" | "phone" | "nationalCode" | "travelDate" | "returnDate" | "birthDate" | "travelType" | "leaderName" | "leaderPhone" | "createdById" | "packId" | "createdAt", ExtArgs["result"]["passenger"]>
  export type PassengerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    pack?: boolean | Passenger$packArgs<ExtArgs>
    busAssignment?: boolean | Passenger$busAssignmentArgs<ExtArgs>
    _count?: boolean | PassengerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PassengerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    pack?: boolean | Passenger$packArgs<ExtArgs>
  }
  export type PassengerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    pack?: boolean | Passenger$packArgs<ExtArgs>
  }

  export type $PassengerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Passenger"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      pack: Prisma.$PackPayload<ExtArgs> | null
      busAssignment: Prisma.$BusAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string | null
      lastName: string | null
      gender: string
      phone: string
      nationalCode: string
      travelDate: string
      returnDate: string | null
      birthDate: string
      travelType: string
      leaderName: string | null
      leaderPhone: string | null
      createdById: number
      packId: number | null
      createdAt: Date
    }, ExtArgs["result"]["passenger"]>
    composites: {}
  }

  type PassengerGetPayload<S extends boolean | null | undefined | PassengerDefaultArgs> = $Result.GetResult<Prisma.$PassengerPayload, S>

  type PassengerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PassengerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PassengerCountAggregateInputType | true
    }

  export interface PassengerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Passenger'], meta: { name: 'Passenger' } }
    /**
     * Find zero or one Passenger that matches the filter.
     * @param {PassengerFindUniqueArgs} args - Arguments to find a Passenger
     * @example
     * // Get one Passenger
     * const passenger = await prisma.passenger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PassengerFindUniqueArgs>(args: SelectSubset<T, PassengerFindUniqueArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Passenger that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PassengerFindUniqueOrThrowArgs} args - Arguments to find a Passenger
     * @example
     * // Get one Passenger
     * const passenger = await prisma.passenger.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PassengerFindUniqueOrThrowArgs>(args: SelectSubset<T, PassengerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Passenger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerFindFirstArgs} args - Arguments to find a Passenger
     * @example
     * // Get one Passenger
     * const passenger = await prisma.passenger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PassengerFindFirstArgs>(args?: SelectSubset<T, PassengerFindFirstArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Passenger that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerFindFirstOrThrowArgs} args - Arguments to find a Passenger
     * @example
     * // Get one Passenger
     * const passenger = await prisma.passenger.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PassengerFindFirstOrThrowArgs>(args?: SelectSubset<T, PassengerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Passengers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passengers
     * const passengers = await prisma.passenger.findMany()
     * 
     * // Get first 10 Passengers
     * const passengers = await prisma.passenger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passengerWithIdOnly = await prisma.passenger.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PassengerFindManyArgs>(args?: SelectSubset<T, PassengerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Passenger.
     * @param {PassengerCreateArgs} args - Arguments to create a Passenger.
     * @example
     * // Create one Passenger
     * const Passenger = await prisma.passenger.create({
     *   data: {
     *     // ... data to create a Passenger
     *   }
     * })
     * 
     */
    create<T extends PassengerCreateArgs>(args: SelectSubset<T, PassengerCreateArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Passengers.
     * @param {PassengerCreateManyArgs} args - Arguments to create many Passengers.
     * @example
     * // Create many Passengers
     * const passenger = await prisma.passenger.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PassengerCreateManyArgs>(args?: SelectSubset<T, PassengerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Passengers and returns the data saved in the database.
     * @param {PassengerCreateManyAndReturnArgs} args - Arguments to create many Passengers.
     * @example
     * // Create many Passengers
     * const passenger = await prisma.passenger.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Passengers and only return the `id`
     * const passengerWithIdOnly = await prisma.passenger.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PassengerCreateManyAndReturnArgs>(args?: SelectSubset<T, PassengerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Passenger.
     * @param {PassengerDeleteArgs} args - Arguments to delete one Passenger.
     * @example
     * // Delete one Passenger
     * const Passenger = await prisma.passenger.delete({
     *   where: {
     *     // ... filter to delete one Passenger
     *   }
     * })
     * 
     */
    delete<T extends PassengerDeleteArgs>(args: SelectSubset<T, PassengerDeleteArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Passenger.
     * @param {PassengerUpdateArgs} args - Arguments to update one Passenger.
     * @example
     * // Update one Passenger
     * const passenger = await prisma.passenger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PassengerUpdateArgs>(args: SelectSubset<T, PassengerUpdateArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Passengers.
     * @param {PassengerDeleteManyArgs} args - Arguments to filter Passengers to delete.
     * @example
     * // Delete a few Passengers
     * const { count } = await prisma.passenger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PassengerDeleteManyArgs>(args?: SelectSubset<T, PassengerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passengers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passengers
     * const passenger = await prisma.passenger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PassengerUpdateManyArgs>(args: SelectSubset<T, PassengerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passengers and returns the data updated in the database.
     * @param {PassengerUpdateManyAndReturnArgs} args - Arguments to update many Passengers.
     * @example
     * // Update many Passengers
     * const passenger = await prisma.passenger.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Passengers and only return the `id`
     * const passengerWithIdOnly = await prisma.passenger.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PassengerUpdateManyAndReturnArgs>(args: SelectSubset<T, PassengerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Passenger.
     * @param {PassengerUpsertArgs} args - Arguments to update or create a Passenger.
     * @example
     * // Update or create a Passenger
     * const passenger = await prisma.passenger.upsert({
     *   create: {
     *     // ... data to create a Passenger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Passenger we want to update
     *   }
     * })
     */
    upsert<T extends PassengerUpsertArgs>(args: SelectSubset<T, PassengerUpsertArgs<ExtArgs>>): Prisma__PassengerClient<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Passengers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerCountArgs} args - Arguments to filter Passengers to count.
     * @example
     * // Count the number of Passengers
     * const count = await prisma.passenger.count({
     *   where: {
     *     // ... the filter for the Passengers we want to count
     *   }
     * })
    **/
    count<T extends PassengerCountArgs>(
      args?: Subset<T, PassengerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassengerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Passenger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassengerAggregateArgs>(args: Subset<T, PassengerAggregateArgs>): Prisma.PrismaPromise<GetPassengerAggregateType<T>>

    /**
     * Group by Passenger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassengerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassengerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassengerGroupByArgs['orderBy'] }
        : { orderBy?: PassengerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassengerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassengerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Passenger model
   */
  readonly fields: PassengerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Passenger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassengerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pack<T extends Passenger$packArgs<ExtArgs> = {}>(args?: Subset<T, Passenger$packArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    busAssignment<T extends Passenger$busAssignmentArgs<ExtArgs> = {}>(args?: Subset<T, Passenger$busAssignmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Passenger model
   */
  interface PassengerFieldRefs {
    readonly id: FieldRef<"Passenger", 'Int'>
    readonly firstName: FieldRef<"Passenger", 'String'>
    readonly lastName: FieldRef<"Passenger", 'String'>
    readonly gender: FieldRef<"Passenger", 'String'>
    readonly phone: FieldRef<"Passenger", 'String'>
    readonly nationalCode: FieldRef<"Passenger", 'String'>
    readonly travelDate: FieldRef<"Passenger", 'String'>
    readonly returnDate: FieldRef<"Passenger", 'String'>
    readonly birthDate: FieldRef<"Passenger", 'String'>
    readonly travelType: FieldRef<"Passenger", 'String'>
    readonly leaderName: FieldRef<"Passenger", 'String'>
    readonly leaderPhone: FieldRef<"Passenger", 'String'>
    readonly createdById: FieldRef<"Passenger", 'Int'>
    readonly packId: FieldRef<"Passenger", 'Int'>
    readonly createdAt: FieldRef<"Passenger", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Passenger findUnique
   */
  export type PassengerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * Filter, which Passenger to fetch.
     */
    where: PassengerWhereUniqueInput
  }

  /**
   * Passenger findUniqueOrThrow
   */
  export type PassengerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * Filter, which Passenger to fetch.
     */
    where: PassengerWhereUniqueInput
  }

  /**
   * Passenger findFirst
   */
  export type PassengerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * Filter, which Passenger to fetch.
     */
    where?: PassengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passengers to fetch.
     */
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passengers.
     */
    cursor?: PassengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passengers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passengers.
     */
    distinct?: PassengerScalarFieldEnum | PassengerScalarFieldEnum[]
  }

  /**
   * Passenger findFirstOrThrow
   */
  export type PassengerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * Filter, which Passenger to fetch.
     */
    where?: PassengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passengers to fetch.
     */
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passengers.
     */
    cursor?: PassengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passengers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passengers.
     */
    distinct?: PassengerScalarFieldEnum | PassengerScalarFieldEnum[]
  }

  /**
   * Passenger findMany
   */
  export type PassengerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * Filter, which Passengers to fetch.
     */
    where?: PassengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passengers to fetch.
     */
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Passengers.
     */
    cursor?: PassengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passengers.
     */
    skip?: number
    distinct?: PassengerScalarFieldEnum | PassengerScalarFieldEnum[]
  }

  /**
   * Passenger create
   */
  export type PassengerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * The data needed to create a Passenger.
     */
    data: XOR<PassengerCreateInput, PassengerUncheckedCreateInput>
  }

  /**
   * Passenger createMany
   */
  export type PassengerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Passengers.
     */
    data: PassengerCreateManyInput | PassengerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Passenger createManyAndReturn
   */
  export type PassengerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * The data used to create many Passengers.
     */
    data: PassengerCreateManyInput | PassengerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Passenger update
   */
  export type PassengerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * The data needed to update a Passenger.
     */
    data: XOR<PassengerUpdateInput, PassengerUncheckedUpdateInput>
    /**
     * Choose, which Passenger to update.
     */
    where: PassengerWhereUniqueInput
  }

  /**
   * Passenger updateMany
   */
  export type PassengerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Passengers.
     */
    data: XOR<PassengerUpdateManyMutationInput, PassengerUncheckedUpdateManyInput>
    /**
     * Filter which Passengers to update
     */
    where?: PassengerWhereInput
    /**
     * Limit how many Passengers to update.
     */
    limit?: number
  }

  /**
   * Passenger updateManyAndReturn
   */
  export type PassengerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * The data used to update Passengers.
     */
    data: XOR<PassengerUpdateManyMutationInput, PassengerUncheckedUpdateManyInput>
    /**
     * Filter which Passengers to update
     */
    where?: PassengerWhereInput
    /**
     * Limit how many Passengers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Passenger upsert
   */
  export type PassengerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * The filter to search for the Passenger to update in case it exists.
     */
    where: PassengerWhereUniqueInput
    /**
     * In case the Passenger found by the `where` argument doesn't exist, create a new Passenger with this data.
     */
    create: XOR<PassengerCreateInput, PassengerUncheckedCreateInput>
    /**
     * In case the Passenger was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassengerUpdateInput, PassengerUncheckedUpdateInput>
  }

  /**
   * Passenger delete
   */
  export type PassengerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    /**
     * Filter which Passenger to delete.
     */
    where: PassengerWhereUniqueInput
  }

  /**
   * Passenger deleteMany
   */
  export type PassengerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passengers to delete
     */
    where?: PassengerWhereInput
    /**
     * Limit how many Passengers to delete.
     */
    limit?: number
  }

  /**
   * Passenger.pack
   */
  export type Passenger$packArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    where?: PackWhereInput
  }

  /**
   * Passenger.busAssignment
   */
  export type Passenger$busAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    where?: BusAssignmentWhereInput
    orderBy?: BusAssignmentOrderByWithRelationInput | BusAssignmentOrderByWithRelationInput[]
    cursor?: BusAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusAssignmentScalarFieldEnum | BusAssignmentScalarFieldEnum[]
  }

  /**
   * Passenger without action
   */
  export type PassengerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
  }


  /**
   * Model Pack
   */

  export type AggregatePack = {
    _count: PackCountAggregateOutputType | null
    _avg: PackAvgAggregateOutputType | null
    _sum: PackSumAggregateOutputType | null
    _min: PackMinAggregateOutputType | null
    _max: PackMaxAggregateOutputType | null
  }

  export type PackAvgAggregateOutputType = {
    id: number | null
    repository: number | null
    busAssignmentId: number | null
    finalConfirmationId: number | null
  }

  export type PackSumAggregateOutputType = {
    id: number | null
    repository: number | null
    busAssignmentId: number | null
    finalConfirmationId: number | null
  }

  export type PackMinAggregateOutputType = {
    id: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
    repository: number | null
    status: $Enums.PackStatus | null
    busAssignmentId: number | null
    finalConfirmationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackMaxAggregateOutputType = {
    id: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
    repository: number | null
    status: $Enums.PackStatus | null
    busAssignmentId: number | null
    finalConfirmationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackCountAggregateOutputType = {
    id: number
    travelDate: number
    type: number
    repository: number
    status: number
    busAssignmentId: number
    finalConfirmationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PackAvgAggregateInputType = {
    id?: true
    repository?: true
    busAssignmentId?: true
    finalConfirmationId?: true
  }

  export type PackSumAggregateInputType = {
    id?: true
    repository?: true
    busAssignmentId?: true
    finalConfirmationId?: true
  }

  export type PackMinAggregateInputType = {
    id?: true
    travelDate?: true
    type?: true
    repository?: true
    status?: true
    busAssignmentId?: true
    finalConfirmationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackMaxAggregateInputType = {
    id?: true
    travelDate?: true
    type?: true
    repository?: true
    status?: true
    busAssignmentId?: true
    finalConfirmationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackCountAggregateInputType = {
    id?: true
    travelDate?: true
    type?: true
    repository?: true
    status?: true
    busAssignmentId?: true
    finalConfirmationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pack to aggregate.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: PackOrderByWithRelationInput | PackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packs
    **/
    _count?: true | PackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackMaxAggregateInputType
  }

  export type GetPackAggregateType<T extends PackAggregateArgs> = {
        [P in keyof T & keyof AggregatePack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePack[P]>
      : GetScalarType<T[P], AggregatePack[P]>
  }




  export type PackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackWhereInput
    orderBy?: PackOrderByWithAggregationInput | PackOrderByWithAggregationInput[]
    by: PackScalarFieldEnum[] | PackScalarFieldEnum
    having?: PackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackCountAggregateInputType | true
    _avg?: PackAvgAggregateInputType
    _sum?: PackSumAggregateInputType
    _min?: PackMinAggregateInputType
    _max?: PackMaxAggregateInputType
  }

  export type PackGroupByOutputType = {
    id: number
    travelDate: Date
    type: $Enums.PackType
    repository: number
    status: $Enums.PackStatus
    busAssignmentId: number | null
    finalConfirmationId: number | null
    createdAt: Date
    updatedAt: Date
    _count: PackCountAggregateOutputType | null
    _avg: PackAvgAggregateOutputType | null
    _sum: PackSumAggregateOutputType | null
    _min: PackMinAggregateOutputType | null
    _max: PackMaxAggregateOutputType | null
  }

  type GetPackGroupByPayload<T extends PackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackGroupByOutputType[P]>
            : GetScalarType<T[P], PackGroupByOutputType[P]>
        }
      >
    >


  export type PackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    busAssignmentId?: boolean
    finalConfirmationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passengers?: boolean | Pack$passengersArgs<ExtArgs>
    busAssignment?: boolean | Pack$busAssignmentArgs<ExtArgs>
    finalConfirmation?: boolean | Pack$finalConfirmationArgs<ExtArgs>
    history?: boolean | Pack$historyArgs<ExtArgs>
    smsHistory?: boolean | Pack$smsHistoryArgs<ExtArgs>
    _count?: boolean | PackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pack"]>

  export type PackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    busAssignmentId?: boolean
    finalConfirmationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    busAssignment?: boolean | Pack$busAssignmentArgs<ExtArgs>
  }, ExtArgs["result"]["pack"]>

  export type PackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    busAssignmentId?: boolean
    finalConfirmationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    busAssignment?: boolean | Pack$busAssignmentArgs<ExtArgs>
  }, ExtArgs["result"]["pack"]>

  export type PackSelectScalar = {
    id?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    busAssignmentId?: boolean
    finalConfirmationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "travelDate" | "type" | "repository" | "status" | "busAssignmentId" | "finalConfirmationId" | "createdAt" | "updatedAt", ExtArgs["result"]["pack"]>
  export type PackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passengers?: boolean | Pack$passengersArgs<ExtArgs>
    busAssignment?: boolean | Pack$busAssignmentArgs<ExtArgs>
    finalConfirmation?: boolean | Pack$finalConfirmationArgs<ExtArgs>
    history?: boolean | Pack$historyArgs<ExtArgs>
    smsHistory?: boolean | Pack$smsHistoryArgs<ExtArgs>
    _count?: boolean | PackCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    busAssignment?: boolean | Pack$busAssignmentArgs<ExtArgs>
  }
  export type PackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    busAssignment?: boolean | Pack$busAssignmentArgs<ExtArgs>
  }

  export type $PackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pack"
    objects: {
      passengers: Prisma.$PassengerPayload<ExtArgs>[]
      busAssignment: Prisma.$BusAssignmentPayload<ExtArgs> | null
      finalConfirmation: Prisma.$FinalConfirmationPayload<ExtArgs> | null
      history: Prisma.$PackHistoryPayload<ExtArgs>[]
      smsHistory: Prisma.$SmsHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      travelDate: Date
      type: $Enums.PackType
      repository: number
      status: $Enums.PackStatus
      busAssignmentId: number | null
      finalConfirmationId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pack"]>
    composites: {}
  }

  type PackGetPayload<S extends boolean | null | undefined | PackDefaultArgs> = $Result.GetResult<Prisma.$PackPayload, S>

  type PackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackCountAggregateInputType | true
    }

  export interface PackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pack'], meta: { name: 'Pack' } }
    /**
     * Find zero or one Pack that matches the filter.
     * @param {PackFindUniqueArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackFindUniqueArgs>(args: SelectSubset<T, PackFindUniqueArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pack that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackFindUniqueOrThrowArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackFindUniqueOrThrowArgs>(args: SelectSubset<T, PackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pack that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackFindFirstArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackFindFirstArgs>(args?: SelectSubset<T, PackFindFirstArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pack that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackFindFirstOrThrowArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackFindFirstOrThrowArgs>(args?: SelectSubset<T, PackFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Packs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packs
     * const packs = await prisma.pack.findMany()
     * 
     * // Get first 10 Packs
     * const packs = await prisma.pack.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packWithIdOnly = await prisma.pack.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackFindManyArgs>(args?: SelectSubset<T, PackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pack.
     * @param {PackCreateArgs} args - Arguments to create a Pack.
     * @example
     * // Create one Pack
     * const Pack = await prisma.pack.create({
     *   data: {
     *     // ... data to create a Pack
     *   }
     * })
     * 
     */
    create<T extends PackCreateArgs>(args: SelectSubset<T, PackCreateArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Packs.
     * @param {PackCreateManyArgs} args - Arguments to create many Packs.
     * @example
     * // Create many Packs
     * const pack = await prisma.pack.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackCreateManyArgs>(args?: SelectSubset<T, PackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packs and returns the data saved in the database.
     * @param {PackCreateManyAndReturnArgs} args - Arguments to create many Packs.
     * @example
     * // Create many Packs
     * const pack = await prisma.pack.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packs and only return the `id`
     * const packWithIdOnly = await prisma.pack.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackCreateManyAndReturnArgs>(args?: SelectSubset<T, PackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pack.
     * @param {PackDeleteArgs} args - Arguments to delete one Pack.
     * @example
     * // Delete one Pack
     * const Pack = await prisma.pack.delete({
     *   where: {
     *     // ... filter to delete one Pack
     *   }
     * })
     * 
     */
    delete<T extends PackDeleteArgs>(args: SelectSubset<T, PackDeleteArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pack.
     * @param {PackUpdateArgs} args - Arguments to update one Pack.
     * @example
     * // Update one Pack
     * const pack = await prisma.pack.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackUpdateArgs>(args: SelectSubset<T, PackUpdateArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Packs.
     * @param {PackDeleteManyArgs} args - Arguments to filter Packs to delete.
     * @example
     * // Delete a few Packs
     * const { count } = await prisma.pack.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackDeleteManyArgs>(args?: SelectSubset<T, PackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packs
     * const pack = await prisma.pack.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackUpdateManyArgs>(args: SelectSubset<T, PackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packs and returns the data updated in the database.
     * @param {PackUpdateManyAndReturnArgs} args - Arguments to update many Packs.
     * @example
     * // Update many Packs
     * const pack = await prisma.pack.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Packs and only return the `id`
     * const packWithIdOnly = await prisma.pack.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackUpdateManyAndReturnArgs>(args: SelectSubset<T, PackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pack.
     * @param {PackUpsertArgs} args - Arguments to update or create a Pack.
     * @example
     * // Update or create a Pack
     * const pack = await prisma.pack.upsert({
     *   create: {
     *     // ... data to create a Pack
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pack we want to update
     *   }
     * })
     */
    upsert<T extends PackUpsertArgs>(args: SelectSubset<T, PackUpsertArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Packs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackCountArgs} args - Arguments to filter Packs to count.
     * @example
     * // Count the number of Packs
     * const count = await prisma.pack.count({
     *   where: {
     *     // ... the filter for the Packs we want to count
     *   }
     * })
    **/
    count<T extends PackCountArgs>(
      args?: Subset<T, PackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackAggregateArgs>(args: Subset<T, PackAggregateArgs>): Prisma.PrismaPromise<GetPackAggregateType<T>>

    /**
     * Group by Pack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackGroupByArgs['orderBy'] }
        : { orderBy?: PackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pack model
   */
  readonly fields: PackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pack.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passengers<T extends Pack$passengersArgs<ExtArgs> = {}>(args?: Subset<T, Pack$passengersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    busAssignment<T extends Pack$busAssignmentArgs<ExtArgs> = {}>(args?: Subset<T, Pack$busAssignmentArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    finalConfirmation<T extends Pack$finalConfirmationArgs<ExtArgs> = {}>(args?: Subset<T, Pack$finalConfirmationArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    history<T extends Pack$historyArgs<ExtArgs> = {}>(args?: Subset<T, Pack$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    smsHistory<T extends Pack$smsHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Pack$smsHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pack model
   */
  interface PackFieldRefs {
    readonly id: FieldRef<"Pack", 'Int'>
    readonly travelDate: FieldRef<"Pack", 'DateTime'>
    readonly type: FieldRef<"Pack", 'PackType'>
    readonly repository: FieldRef<"Pack", 'Int'>
    readonly status: FieldRef<"Pack", 'PackStatus'>
    readonly busAssignmentId: FieldRef<"Pack", 'Int'>
    readonly finalConfirmationId: FieldRef<"Pack", 'Int'>
    readonly createdAt: FieldRef<"Pack", 'DateTime'>
    readonly updatedAt: FieldRef<"Pack", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pack findUnique
   */
  export type PackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * Filter, which Pack to fetch.
     */
    where: PackWhereUniqueInput
  }

  /**
   * Pack findUniqueOrThrow
   */
  export type PackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * Filter, which Pack to fetch.
     */
    where: PackWhereUniqueInput
  }

  /**
   * Pack findFirst
   */
  export type PackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * Filter, which Pack to fetch.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: PackOrderByWithRelationInput | PackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packs.
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packs.
     */
    distinct?: PackScalarFieldEnum | PackScalarFieldEnum[]
  }

  /**
   * Pack findFirstOrThrow
   */
  export type PackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * Filter, which Pack to fetch.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: PackOrderByWithRelationInput | PackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packs.
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packs.
     */
    distinct?: PackScalarFieldEnum | PackScalarFieldEnum[]
  }

  /**
   * Pack findMany
   */
  export type PackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * Filter, which Packs to fetch.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: PackOrderByWithRelationInput | PackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packs.
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    distinct?: PackScalarFieldEnum | PackScalarFieldEnum[]
  }

  /**
   * Pack create
   */
  export type PackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * The data needed to create a Pack.
     */
    data: XOR<PackCreateInput, PackUncheckedCreateInput>
  }

  /**
   * Pack createMany
   */
  export type PackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packs.
     */
    data: PackCreateManyInput | PackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pack createManyAndReturn
   */
  export type PackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * The data used to create many Packs.
     */
    data: PackCreateManyInput | PackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pack update
   */
  export type PackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * The data needed to update a Pack.
     */
    data: XOR<PackUpdateInput, PackUncheckedUpdateInput>
    /**
     * Choose, which Pack to update.
     */
    where: PackWhereUniqueInput
  }

  /**
   * Pack updateMany
   */
  export type PackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packs.
     */
    data: XOR<PackUpdateManyMutationInput, PackUncheckedUpdateManyInput>
    /**
     * Filter which Packs to update
     */
    where?: PackWhereInput
    /**
     * Limit how many Packs to update.
     */
    limit?: number
  }

  /**
   * Pack updateManyAndReturn
   */
  export type PackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * The data used to update Packs.
     */
    data: XOR<PackUpdateManyMutationInput, PackUncheckedUpdateManyInput>
    /**
     * Filter which Packs to update
     */
    where?: PackWhereInput
    /**
     * Limit how many Packs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pack upsert
   */
  export type PackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * The filter to search for the Pack to update in case it exists.
     */
    where: PackWhereUniqueInput
    /**
     * In case the Pack found by the `where` argument doesn't exist, create a new Pack with this data.
     */
    create: XOR<PackCreateInput, PackUncheckedCreateInput>
    /**
     * In case the Pack was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackUpdateInput, PackUncheckedUpdateInput>
  }

  /**
   * Pack delete
   */
  export type PackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    /**
     * Filter which Pack to delete.
     */
    where: PackWhereUniqueInput
  }

  /**
   * Pack deleteMany
   */
  export type PackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packs to delete
     */
    where?: PackWhereInput
    /**
     * Limit how many Packs to delete.
     */
    limit?: number
  }

  /**
   * Pack.passengers
   */
  export type Pack$passengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    where?: PassengerWhereInput
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    cursor?: PassengerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassengerScalarFieldEnum | PassengerScalarFieldEnum[]
  }

  /**
   * Pack.busAssignment
   */
  export type Pack$busAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    where?: BusAssignmentWhereInput
  }

  /**
   * Pack.finalConfirmation
   */
  export type Pack$finalConfirmationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    where?: FinalConfirmationWhereInput
  }

  /**
   * Pack.history
   */
  export type Pack$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    where?: PackHistoryWhereInput
    orderBy?: PackHistoryOrderByWithRelationInput | PackHistoryOrderByWithRelationInput[]
    cursor?: PackHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackHistoryScalarFieldEnum | PackHistoryScalarFieldEnum[]
  }

  /**
   * Pack.smsHistory
   */
  export type Pack$smsHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    where?: SmsHistoryWhereInput
    orderBy?: SmsHistoryOrderByWithRelationInput | SmsHistoryOrderByWithRelationInput[]
    cursor?: SmsHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SmsHistoryScalarFieldEnum | SmsHistoryScalarFieldEnum[]
  }

  /**
   * Pack without action
   */
  export type PackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
  }


  /**
   * Model BusAssignment
   */

  export type AggregateBusAssignment = {
    _count: BusAssignmentCountAggregateOutputType | null
    _avg: BusAssignmentAvgAggregateOutputType | null
    _sum: BusAssignmentSumAggregateOutputType | null
    _min: BusAssignmentMinAggregateOutputType | null
    _max: BusAssignmentMaxAggregateOutputType | null
  }

  export type BusAssignmentAvgAggregateOutputType = {
    id: number | null
    packId: number | null
  }

  export type BusAssignmentSumAggregateOutputType = {
    id: number | null
    packId: number | null
  }

  export type BusAssignmentMinAggregateOutputType = {
    id: number | null
    company: string | null
    plate: string | null
    driver: string | null
    driverPhone: string | null
    packId: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
  }

  export type BusAssignmentMaxAggregateOutputType = {
    id: number | null
    company: string | null
    plate: string | null
    driver: string | null
    driverPhone: string | null
    packId: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
  }

  export type BusAssignmentCountAggregateOutputType = {
    id: number
    company: number
    plate: number
    driver: number
    driverPhone: number
    packId: number
    travelDate: number
    type: number
    _all: number
  }


  export type BusAssignmentAvgAggregateInputType = {
    id?: true
    packId?: true
  }

  export type BusAssignmentSumAggregateInputType = {
    id?: true
    packId?: true
  }

  export type BusAssignmentMinAggregateInputType = {
    id?: true
    company?: true
    plate?: true
    driver?: true
    driverPhone?: true
    packId?: true
    travelDate?: true
    type?: true
  }

  export type BusAssignmentMaxAggregateInputType = {
    id?: true
    company?: true
    plate?: true
    driver?: true
    driverPhone?: true
    packId?: true
    travelDate?: true
    type?: true
  }

  export type BusAssignmentCountAggregateInputType = {
    id?: true
    company?: true
    plate?: true
    driver?: true
    driverPhone?: true
    packId?: true
    travelDate?: true
    type?: true
    _all?: true
  }

  export type BusAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusAssignment to aggregate.
     */
    where?: BusAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusAssignments to fetch.
     */
    orderBy?: BusAssignmentOrderByWithRelationInput | BusAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusAssignments
    **/
    _count?: true | BusAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusAssignmentMaxAggregateInputType
  }

  export type GetBusAssignmentAggregateType<T extends BusAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateBusAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusAssignment[P]>
      : GetScalarType<T[P], AggregateBusAssignment[P]>
  }




  export type BusAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusAssignmentWhereInput
    orderBy?: BusAssignmentOrderByWithAggregationInput | BusAssignmentOrderByWithAggregationInput[]
    by: BusAssignmentScalarFieldEnum[] | BusAssignmentScalarFieldEnum
    having?: BusAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusAssignmentCountAggregateInputType | true
    _avg?: BusAssignmentAvgAggregateInputType
    _sum?: BusAssignmentSumAggregateInputType
    _min?: BusAssignmentMinAggregateInputType
    _max?: BusAssignmentMaxAggregateInputType
  }

  export type BusAssignmentGroupByOutputType = {
    id: number
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate: Date
    type: $Enums.PackType
    _count: BusAssignmentCountAggregateOutputType | null
    _avg: BusAssignmentAvgAggregateOutputType | null
    _sum: BusAssignmentSumAggregateOutputType | null
    _min: BusAssignmentMinAggregateOutputType | null
    _max: BusAssignmentMaxAggregateOutputType | null
  }

  type GetBusAssignmentGroupByPayload<T extends BusAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], BusAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type BusAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
    pack?: boolean | BusAssignment$packArgs<ExtArgs>
    passengers?: boolean | BusAssignment$passengersArgs<ExtArgs>
    finalConfirmation?: boolean | BusAssignment$finalConfirmationArgs<ExtArgs>
    _count?: boolean | BusAssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["busAssignment"]>

  export type BusAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
  }, ExtArgs["result"]["busAssignment"]>

  export type BusAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
  }, ExtArgs["result"]["busAssignment"]>

  export type BusAssignmentSelectScalar = {
    id?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
  }

  export type BusAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company" | "plate" | "driver" | "driverPhone" | "packId" | "travelDate" | "type", ExtArgs["result"]["busAssignment"]>
  export type BusAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | BusAssignment$packArgs<ExtArgs>
    passengers?: boolean | BusAssignment$passengersArgs<ExtArgs>
    finalConfirmation?: boolean | BusAssignment$finalConfirmationArgs<ExtArgs>
    _count?: boolean | BusAssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BusAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BusAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BusAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusAssignment"
    objects: {
      pack: Prisma.$PackPayload<ExtArgs> | null
      passengers: Prisma.$PassengerPayload<ExtArgs>[]
      finalConfirmation: Prisma.$FinalConfirmationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company: string
      plate: string
      driver: string
      driverPhone: string
      packId: number
      travelDate: Date
      type: $Enums.PackType
    }, ExtArgs["result"]["busAssignment"]>
    composites: {}
  }

  type BusAssignmentGetPayload<S extends boolean | null | undefined | BusAssignmentDefaultArgs> = $Result.GetResult<Prisma.$BusAssignmentPayload, S>

  type BusAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusAssignmentCountAggregateInputType | true
    }

  export interface BusAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusAssignment'], meta: { name: 'BusAssignment' } }
    /**
     * Find zero or one BusAssignment that matches the filter.
     * @param {BusAssignmentFindUniqueArgs} args - Arguments to find a BusAssignment
     * @example
     * // Get one BusAssignment
     * const busAssignment = await prisma.busAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusAssignmentFindUniqueArgs>(args: SelectSubset<T, BusAssignmentFindUniqueArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusAssignmentFindUniqueOrThrowArgs} args - Arguments to find a BusAssignment
     * @example
     * // Get one BusAssignment
     * const busAssignment = await prisma.busAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, BusAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentFindFirstArgs} args - Arguments to find a BusAssignment
     * @example
     * // Get one BusAssignment
     * const busAssignment = await prisma.busAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusAssignmentFindFirstArgs>(args?: SelectSubset<T, BusAssignmentFindFirstArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentFindFirstOrThrowArgs} args - Arguments to find a BusAssignment
     * @example
     * // Get one BusAssignment
     * const busAssignment = await prisma.busAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, BusAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusAssignments
     * const busAssignments = await prisma.busAssignment.findMany()
     * 
     * // Get first 10 BusAssignments
     * const busAssignments = await prisma.busAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const busAssignmentWithIdOnly = await prisma.busAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusAssignmentFindManyArgs>(args?: SelectSubset<T, BusAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusAssignment.
     * @param {BusAssignmentCreateArgs} args - Arguments to create a BusAssignment.
     * @example
     * // Create one BusAssignment
     * const BusAssignment = await prisma.busAssignment.create({
     *   data: {
     *     // ... data to create a BusAssignment
     *   }
     * })
     * 
     */
    create<T extends BusAssignmentCreateArgs>(args: SelectSubset<T, BusAssignmentCreateArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusAssignments.
     * @param {BusAssignmentCreateManyArgs} args - Arguments to create many BusAssignments.
     * @example
     * // Create many BusAssignments
     * const busAssignment = await prisma.busAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusAssignmentCreateManyArgs>(args?: SelectSubset<T, BusAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusAssignments and returns the data saved in the database.
     * @param {BusAssignmentCreateManyAndReturnArgs} args - Arguments to create many BusAssignments.
     * @example
     * // Create many BusAssignments
     * const busAssignment = await prisma.busAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusAssignments and only return the `id`
     * const busAssignmentWithIdOnly = await prisma.busAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, BusAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusAssignment.
     * @param {BusAssignmentDeleteArgs} args - Arguments to delete one BusAssignment.
     * @example
     * // Delete one BusAssignment
     * const BusAssignment = await prisma.busAssignment.delete({
     *   where: {
     *     // ... filter to delete one BusAssignment
     *   }
     * })
     * 
     */
    delete<T extends BusAssignmentDeleteArgs>(args: SelectSubset<T, BusAssignmentDeleteArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusAssignment.
     * @param {BusAssignmentUpdateArgs} args - Arguments to update one BusAssignment.
     * @example
     * // Update one BusAssignment
     * const busAssignment = await prisma.busAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusAssignmentUpdateArgs>(args: SelectSubset<T, BusAssignmentUpdateArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusAssignments.
     * @param {BusAssignmentDeleteManyArgs} args - Arguments to filter BusAssignments to delete.
     * @example
     * // Delete a few BusAssignments
     * const { count } = await prisma.busAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusAssignmentDeleteManyArgs>(args?: SelectSubset<T, BusAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusAssignments
     * const busAssignment = await prisma.busAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusAssignmentUpdateManyArgs>(args: SelectSubset<T, BusAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusAssignments and returns the data updated in the database.
     * @param {BusAssignmentUpdateManyAndReturnArgs} args - Arguments to update many BusAssignments.
     * @example
     * // Update many BusAssignments
     * const busAssignment = await prisma.busAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusAssignments and only return the `id`
     * const busAssignmentWithIdOnly = await prisma.busAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, BusAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusAssignment.
     * @param {BusAssignmentUpsertArgs} args - Arguments to update or create a BusAssignment.
     * @example
     * // Update or create a BusAssignment
     * const busAssignment = await prisma.busAssignment.upsert({
     *   create: {
     *     // ... data to create a BusAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusAssignment we want to update
     *   }
     * })
     */
    upsert<T extends BusAssignmentUpsertArgs>(args: SelectSubset<T, BusAssignmentUpsertArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentCountArgs} args - Arguments to filter BusAssignments to count.
     * @example
     * // Count the number of BusAssignments
     * const count = await prisma.busAssignment.count({
     *   where: {
     *     // ... the filter for the BusAssignments we want to count
     *   }
     * })
    **/
    count<T extends BusAssignmentCountArgs>(
      args?: Subset<T, BusAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusAssignmentAggregateArgs>(args: Subset<T, BusAssignmentAggregateArgs>): Prisma.PrismaPromise<GetBusAssignmentAggregateType<T>>

    /**
     * Group by BusAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: BusAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusAssignment model
   */
  readonly fields: BusAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pack<T extends BusAssignment$packArgs<ExtArgs> = {}>(args?: Subset<T, BusAssignment$packArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    passengers<T extends BusAssignment$passengersArgs<ExtArgs> = {}>(args?: Subset<T, BusAssignment$passengersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassengerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    finalConfirmation<T extends BusAssignment$finalConfirmationArgs<ExtArgs> = {}>(args?: Subset<T, BusAssignment$finalConfirmationArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusAssignment model
   */
  interface BusAssignmentFieldRefs {
    readonly id: FieldRef<"BusAssignment", 'Int'>
    readonly company: FieldRef<"BusAssignment", 'String'>
    readonly plate: FieldRef<"BusAssignment", 'String'>
    readonly driver: FieldRef<"BusAssignment", 'String'>
    readonly driverPhone: FieldRef<"BusAssignment", 'String'>
    readonly packId: FieldRef<"BusAssignment", 'Int'>
    readonly travelDate: FieldRef<"BusAssignment", 'DateTime'>
    readonly type: FieldRef<"BusAssignment", 'PackType'>
  }
    

  // Custom InputTypes
  /**
   * BusAssignment findUnique
   */
  export type BusAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which BusAssignment to fetch.
     */
    where: BusAssignmentWhereUniqueInput
  }

  /**
   * BusAssignment findUniqueOrThrow
   */
  export type BusAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which BusAssignment to fetch.
     */
    where: BusAssignmentWhereUniqueInput
  }

  /**
   * BusAssignment findFirst
   */
  export type BusAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which BusAssignment to fetch.
     */
    where?: BusAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusAssignments to fetch.
     */
    orderBy?: BusAssignmentOrderByWithRelationInput | BusAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusAssignments.
     */
    cursor?: BusAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusAssignments.
     */
    distinct?: BusAssignmentScalarFieldEnum | BusAssignmentScalarFieldEnum[]
  }

  /**
   * BusAssignment findFirstOrThrow
   */
  export type BusAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which BusAssignment to fetch.
     */
    where?: BusAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusAssignments to fetch.
     */
    orderBy?: BusAssignmentOrderByWithRelationInput | BusAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusAssignments.
     */
    cursor?: BusAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusAssignments.
     */
    distinct?: BusAssignmentScalarFieldEnum | BusAssignmentScalarFieldEnum[]
  }

  /**
   * BusAssignment findMany
   */
  export type BusAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which BusAssignments to fetch.
     */
    where?: BusAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusAssignments to fetch.
     */
    orderBy?: BusAssignmentOrderByWithRelationInput | BusAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusAssignments.
     */
    cursor?: BusAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusAssignments.
     */
    skip?: number
    distinct?: BusAssignmentScalarFieldEnum | BusAssignmentScalarFieldEnum[]
  }

  /**
   * BusAssignment create
   */
  export type BusAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a BusAssignment.
     */
    data: XOR<BusAssignmentCreateInput, BusAssignmentUncheckedCreateInput>
  }

  /**
   * BusAssignment createMany
   */
  export type BusAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusAssignments.
     */
    data: BusAssignmentCreateManyInput | BusAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusAssignment createManyAndReturn
   */
  export type BusAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many BusAssignments.
     */
    data: BusAssignmentCreateManyInput | BusAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusAssignment update
   */
  export type BusAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a BusAssignment.
     */
    data: XOR<BusAssignmentUpdateInput, BusAssignmentUncheckedUpdateInput>
    /**
     * Choose, which BusAssignment to update.
     */
    where: BusAssignmentWhereUniqueInput
  }

  /**
   * BusAssignment updateMany
   */
  export type BusAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusAssignments.
     */
    data: XOR<BusAssignmentUpdateManyMutationInput, BusAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which BusAssignments to update
     */
    where?: BusAssignmentWhereInput
    /**
     * Limit how many BusAssignments to update.
     */
    limit?: number
  }

  /**
   * BusAssignment updateManyAndReturn
   */
  export type BusAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update BusAssignments.
     */
    data: XOR<BusAssignmentUpdateManyMutationInput, BusAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which BusAssignments to update
     */
    where?: BusAssignmentWhereInput
    /**
     * Limit how many BusAssignments to update.
     */
    limit?: number
  }

  /**
   * BusAssignment upsert
   */
  export type BusAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the BusAssignment to update in case it exists.
     */
    where: BusAssignmentWhereUniqueInput
    /**
     * In case the BusAssignment found by the `where` argument doesn't exist, create a new BusAssignment with this data.
     */
    create: XOR<BusAssignmentCreateInput, BusAssignmentUncheckedCreateInput>
    /**
     * In case the BusAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusAssignmentUpdateInput, BusAssignmentUncheckedUpdateInput>
  }

  /**
   * BusAssignment delete
   */
  export type BusAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
    /**
     * Filter which BusAssignment to delete.
     */
    where: BusAssignmentWhereUniqueInput
  }

  /**
   * BusAssignment deleteMany
   */
  export type BusAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusAssignments to delete
     */
    where?: BusAssignmentWhereInput
    /**
     * Limit how many BusAssignments to delete.
     */
    limit?: number
  }

  /**
   * BusAssignment.pack
   */
  export type BusAssignment$packArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pack
     */
    omit?: PackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackInclude<ExtArgs> | null
    where?: PackWhereInput
  }

  /**
   * BusAssignment.passengers
   */
  export type BusAssignment$passengersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passenger
     */
    select?: PassengerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Passenger
     */
    omit?: PassengerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassengerInclude<ExtArgs> | null
    where?: PassengerWhereInput
    orderBy?: PassengerOrderByWithRelationInput | PassengerOrderByWithRelationInput[]
    cursor?: PassengerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassengerScalarFieldEnum | PassengerScalarFieldEnum[]
  }

  /**
   * BusAssignment.finalConfirmation
   */
  export type BusAssignment$finalConfirmationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    where?: FinalConfirmationWhereInput
  }

  /**
   * BusAssignment without action
   */
  export type BusAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusAssignment
     */
    select?: BusAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusAssignment
     */
    omit?: BusAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model FinalConfirmation
   */

  export type AggregateFinalConfirmation = {
    _count: FinalConfirmationCountAggregateOutputType | null
    _avg: FinalConfirmationAvgAggregateOutputType | null
    _sum: FinalConfirmationSumAggregateOutputType | null
    _min: FinalConfirmationMinAggregateOutputType | null
    _max: FinalConfirmationMaxAggregateOutputType | null
  }

  export type FinalConfirmationAvgAggregateOutputType = {
    id: number | null
    packId: number | null
    busAssignmentId: number | null
  }

  export type FinalConfirmationSumAggregateOutputType = {
    id: number | null
    packId: number | null
    busAssignmentId: number | null
  }

  export type FinalConfirmationMinAggregateOutputType = {
    id: number | null
    packId: number | null
    busAssignmentId: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
    company: string | null
    plate: string | null
    driver: string | null
    driverPhone: string | null
    confirmationDate: Date | null
  }

  export type FinalConfirmationMaxAggregateOutputType = {
    id: number | null
    packId: number | null
    busAssignmentId: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
    company: string | null
    plate: string | null
    driver: string | null
    driverPhone: string | null
    confirmationDate: Date | null
  }

  export type FinalConfirmationCountAggregateOutputType = {
    id: number
    packId: number
    busAssignmentId: number
    travelDate: number
    type: number
    company: number
    plate: number
    driver: number
    driverPhone: number
    confirmationDate: number
    _all: number
  }


  export type FinalConfirmationAvgAggregateInputType = {
    id?: true
    packId?: true
    busAssignmentId?: true
  }

  export type FinalConfirmationSumAggregateInputType = {
    id?: true
    packId?: true
    busAssignmentId?: true
  }

  export type FinalConfirmationMinAggregateInputType = {
    id?: true
    packId?: true
    busAssignmentId?: true
    travelDate?: true
    type?: true
    company?: true
    plate?: true
    driver?: true
    driverPhone?: true
    confirmationDate?: true
  }

  export type FinalConfirmationMaxAggregateInputType = {
    id?: true
    packId?: true
    busAssignmentId?: true
    travelDate?: true
    type?: true
    company?: true
    plate?: true
    driver?: true
    driverPhone?: true
    confirmationDate?: true
  }

  export type FinalConfirmationCountAggregateInputType = {
    id?: true
    packId?: true
    busAssignmentId?: true
    travelDate?: true
    type?: true
    company?: true
    plate?: true
    driver?: true
    driverPhone?: true
    confirmationDate?: true
    _all?: true
  }

  export type FinalConfirmationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinalConfirmation to aggregate.
     */
    where?: FinalConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinalConfirmations to fetch.
     */
    orderBy?: FinalConfirmationOrderByWithRelationInput | FinalConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinalConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinalConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinalConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinalConfirmations
    **/
    _count?: true | FinalConfirmationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinalConfirmationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinalConfirmationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinalConfirmationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinalConfirmationMaxAggregateInputType
  }

  export type GetFinalConfirmationAggregateType<T extends FinalConfirmationAggregateArgs> = {
        [P in keyof T & keyof AggregateFinalConfirmation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinalConfirmation[P]>
      : GetScalarType<T[P], AggregateFinalConfirmation[P]>
  }




  export type FinalConfirmationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinalConfirmationWhereInput
    orderBy?: FinalConfirmationOrderByWithAggregationInput | FinalConfirmationOrderByWithAggregationInput[]
    by: FinalConfirmationScalarFieldEnum[] | FinalConfirmationScalarFieldEnum
    having?: FinalConfirmationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinalConfirmationCountAggregateInputType | true
    _avg?: FinalConfirmationAvgAggregateInputType
    _sum?: FinalConfirmationSumAggregateInputType
    _min?: FinalConfirmationMinAggregateInputType
    _max?: FinalConfirmationMaxAggregateInputType
  }

  export type FinalConfirmationGroupByOutputType = {
    id: number
    packId: number
    busAssignmentId: number
    travelDate: Date
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate: Date
    _count: FinalConfirmationCountAggregateOutputType | null
    _avg: FinalConfirmationAvgAggregateOutputType | null
    _sum: FinalConfirmationSumAggregateOutputType | null
    _min: FinalConfirmationMinAggregateOutputType | null
    _max: FinalConfirmationMaxAggregateOutputType | null
  }

  type GetFinalConfirmationGroupByPayload<T extends FinalConfirmationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinalConfirmationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinalConfirmationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinalConfirmationGroupByOutputType[P]>
            : GetScalarType<T[P], FinalConfirmationGroupByOutputType[P]>
        }
      >
    >


  export type FinalConfirmationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    busAssignmentId?: boolean
    travelDate?: boolean
    type?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    confirmationDate?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
    busAssignment?: boolean | BusAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finalConfirmation"]>

  export type FinalConfirmationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    busAssignmentId?: boolean
    travelDate?: boolean
    type?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    confirmationDate?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
    busAssignment?: boolean | BusAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finalConfirmation"]>

  export type FinalConfirmationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    busAssignmentId?: boolean
    travelDate?: boolean
    type?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    confirmationDate?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
    busAssignment?: boolean | BusAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finalConfirmation"]>

  export type FinalConfirmationSelectScalar = {
    id?: boolean
    packId?: boolean
    busAssignmentId?: boolean
    travelDate?: boolean
    type?: boolean
    company?: boolean
    plate?: boolean
    driver?: boolean
    driverPhone?: boolean
    confirmationDate?: boolean
  }

  export type FinalConfirmationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "packId" | "busAssignmentId" | "travelDate" | "type" | "company" | "plate" | "driver" | "driverPhone" | "confirmationDate", ExtArgs["result"]["finalConfirmation"]>
  export type FinalConfirmationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
    busAssignment?: boolean | BusAssignmentDefaultArgs<ExtArgs>
  }
  export type FinalConfirmationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
    busAssignment?: boolean | BusAssignmentDefaultArgs<ExtArgs>
  }
  export type FinalConfirmationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
    busAssignment?: boolean | BusAssignmentDefaultArgs<ExtArgs>
  }

  export type $FinalConfirmationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinalConfirmation"
    objects: {
      pack: Prisma.$PackPayload<ExtArgs>
      busAssignment: Prisma.$BusAssignmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packId: number
      busAssignmentId: number
      travelDate: Date
      type: $Enums.PackType
      company: string
      plate: string
      driver: string
      driverPhone: string
      confirmationDate: Date
    }, ExtArgs["result"]["finalConfirmation"]>
    composites: {}
  }

  type FinalConfirmationGetPayload<S extends boolean | null | undefined | FinalConfirmationDefaultArgs> = $Result.GetResult<Prisma.$FinalConfirmationPayload, S>

  type FinalConfirmationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinalConfirmationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinalConfirmationCountAggregateInputType | true
    }

  export interface FinalConfirmationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinalConfirmation'], meta: { name: 'FinalConfirmation' } }
    /**
     * Find zero or one FinalConfirmation that matches the filter.
     * @param {FinalConfirmationFindUniqueArgs} args - Arguments to find a FinalConfirmation
     * @example
     * // Get one FinalConfirmation
     * const finalConfirmation = await prisma.finalConfirmation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinalConfirmationFindUniqueArgs>(args: SelectSubset<T, FinalConfirmationFindUniqueArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FinalConfirmation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinalConfirmationFindUniqueOrThrowArgs} args - Arguments to find a FinalConfirmation
     * @example
     * // Get one FinalConfirmation
     * const finalConfirmation = await prisma.finalConfirmation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinalConfirmationFindUniqueOrThrowArgs>(args: SelectSubset<T, FinalConfirmationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinalConfirmation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationFindFirstArgs} args - Arguments to find a FinalConfirmation
     * @example
     * // Get one FinalConfirmation
     * const finalConfirmation = await prisma.finalConfirmation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinalConfirmationFindFirstArgs>(args?: SelectSubset<T, FinalConfirmationFindFirstArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinalConfirmation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationFindFirstOrThrowArgs} args - Arguments to find a FinalConfirmation
     * @example
     * // Get one FinalConfirmation
     * const finalConfirmation = await prisma.finalConfirmation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinalConfirmationFindFirstOrThrowArgs>(args?: SelectSubset<T, FinalConfirmationFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FinalConfirmations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinalConfirmations
     * const finalConfirmations = await prisma.finalConfirmation.findMany()
     * 
     * // Get first 10 FinalConfirmations
     * const finalConfirmations = await prisma.finalConfirmation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const finalConfirmationWithIdOnly = await prisma.finalConfirmation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinalConfirmationFindManyArgs>(args?: SelectSubset<T, FinalConfirmationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FinalConfirmation.
     * @param {FinalConfirmationCreateArgs} args - Arguments to create a FinalConfirmation.
     * @example
     * // Create one FinalConfirmation
     * const FinalConfirmation = await prisma.finalConfirmation.create({
     *   data: {
     *     // ... data to create a FinalConfirmation
     *   }
     * })
     * 
     */
    create<T extends FinalConfirmationCreateArgs>(args: SelectSubset<T, FinalConfirmationCreateArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FinalConfirmations.
     * @param {FinalConfirmationCreateManyArgs} args - Arguments to create many FinalConfirmations.
     * @example
     * // Create many FinalConfirmations
     * const finalConfirmation = await prisma.finalConfirmation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinalConfirmationCreateManyArgs>(args?: SelectSubset<T, FinalConfirmationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinalConfirmations and returns the data saved in the database.
     * @param {FinalConfirmationCreateManyAndReturnArgs} args - Arguments to create many FinalConfirmations.
     * @example
     * // Create many FinalConfirmations
     * const finalConfirmation = await prisma.finalConfirmation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinalConfirmations and only return the `id`
     * const finalConfirmationWithIdOnly = await prisma.finalConfirmation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinalConfirmationCreateManyAndReturnArgs>(args?: SelectSubset<T, FinalConfirmationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FinalConfirmation.
     * @param {FinalConfirmationDeleteArgs} args - Arguments to delete one FinalConfirmation.
     * @example
     * // Delete one FinalConfirmation
     * const FinalConfirmation = await prisma.finalConfirmation.delete({
     *   where: {
     *     // ... filter to delete one FinalConfirmation
     *   }
     * })
     * 
     */
    delete<T extends FinalConfirmationDeleteArgs>(args: SelectSubset<T, FinalConfirmationDeleteArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FinalConfirmation.
     * @param {FinalConfirmationUpdateArgs} args - Arguments to update one FinalConfirmation.
     * @example
     * // Update one FinalConfirmation
     * const finalConfirmation = await prisma.finalConfirmation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinalConfirmationUpdateArgs>(args: SelectSubset<T, FinalConfirmationUpdateArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FinalConfirmations.
     * @param {FinalConfirmationDeleteManyArgs} args - Arguments to filter FinalConfirmations to delete.
     * @example
     * // Delete a few FinalConfirmations
     * const { count } = await prisma.finalConfirmation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinalConfirmationDeleteManyArgs>(args?: SelectSubset<T, FinalConfirmationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinalConfirmations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinalConfirmations
     * const finalConfirmation = await prisma.finalConfirmation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinalConfirmationUpdateManyArgs>(args: SelectSubset<T, FinalConfirmationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinalConfirmations and returns the data updated in the database.
     * @param {FinalConfirmationUpdateManyAndReturnArgs} args - Arguments to update many FinalConfirmations.
     * @example
     * // Update many FinalConfirmations
     * const finalConfirmation = await prisma.finalConfirmation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinalConfirmations and only return the `id`
     * const finalConfirmationWithIdOnly = await prisma.finalConfirmation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinalConfirmationUpdateManyAndReturnArgs>(args: SelectSubset<T, FinalConfirmationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FinalConfirmation.
     * @param {FinalConfirmationUpsertArgs} args - Arguments to update or create a FinalConfirmation.
     * @example
     * // Update or create a FinalConfirmation
     * const finalConfirmation = await prisma.finalConfirmation.upsert({
     *   create: {
     *     // ... data to create a FinalConfirmation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinalConfirmation we want to update
     *   }
     * })
     */
    upsert<T extends FinalConfirmationUpsertArgs>(args: SelectSubset<T, FinalConfirmationUpsertArgs<ExtArgs>>): Prisma__FinalConfirmationClient<$Result.GetResult<Prisma.$FinalConfirmationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FinalConfirmations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationCountArgs} args - Arguments to filter FinalConfirmations to count.
     * @example
     * // Count the number of FinalConfirmations
     * const count = await prisma.finalConfirmation.count({
     *   where: {
     *     // ... the filter for the FinalConfirmations we want to count
     *   }
     * })
    **/
    count<T extends FinalConfirmationCountArgs>(
      args?: Subset<T, FinalConfirmationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinalConfirmationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinalConfirmation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinalConfirmationAggregateArgs>(args: Subset<T, FinalConfirmationAggregateArgs>): Prisma.PrismaPromise<GetFinalConfirmationAggregateType<T>>

    /**
     * Group by FinalConfirmation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalConfirmationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinalConfirmationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinalConfirmationGroupByArgs['orderBy'] }
        : { orderBy?: FinalConfirmationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinalConfirmationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinalConfirmationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinalConfirmation model
   */
  readonly fields: FinalConfirmationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinalConfirmation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinalConfirmationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pack<T extends PackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackDefaultArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    busAssignment<T extends BusAssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusAssignmentDefaultArgs<ExtArgs>>): Prisma__BusAssignmentClient<$Result.GetResult<Prisma.$BusAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinalConfirmation model
   */
  interface FinalConfirmationFieldRefs {
    readonly id: FieldRef<"FinalConfirmation", 'Int'>
    readonly packId: FieldRef<"FinalConfirmation", 'Int'>
    readonly busAssignmentId: FieldRef<"FinalConfirmation", 'Int'>
    readonly travelDate: FieldRef<"FinalConfirmation", 'DateTime'>
    readonly type: FieldRef<"FinalConfirmation", 'PackType'>
    readonly company: FieldRef<"FinalConfirmation", 'String'>
    readonly plate: FieldRef<"FinalConfirmation", 'String'>
    readonly driver: FieldRef<"FinalConfirmation", 'String'>
    readonly driverPhone: FieldRef<"FinalConfirmation", 'String'>
    readonly confirmationDate: FieldRef<"FinalConfirmation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FinalConfirmation findUnique
   */
  export type FinalConfirmationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which FinalConfirmation to fetch.
     */
    where: FinalConfirmationWhereUniqueInput
  }

  /**
   * FinalConfirmation findUniqueOrThrow
   */
  export type FinalConfirmationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which FinalConfirmation to fetch.
     */
    where: FinalConfirmationWhereUniqueInput
  }

  /**
   * FinalConfirmation findFirst
   */
  export type FinalConfirmationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which FinalConfirmation to fetch.
     */
    where?: FinalConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinalConfirmations to fetch.
     */
    orderBy?: FinalConfirmationOrderByWithRelationInput | FinalConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinalConfirmations.
     */
    cursor?: FinalConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinalConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinalConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinalConfirmations.
     */
    distinct?: FinalConfirmationScalarFieldEnum | FinalConfirmationScalarFieldEnum[]
  }

  /**
   * FinalConfirmation findFirstOrThrow
   */
  export type FinalConfirmationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which FinalConfirmation to fetch.
     */
    where?: FinalConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinalConfirmations to fetch.
     */
    orderBy?: FinalConfirmationOrderByWithRelationInput | FinalConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinalConfirmations.
     */
    cursor?: FinalConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinalConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinalConfirmations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinalConfirmations.
     */
    distinct?: FinalConfirmationScalarFieldEnum | FinalConfirmationScalarFieldEnum[]
  }

  /**
   * FinalConfirmation findMany
   */
  export type FinalConfirmationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * Filter, which FinalConfirmations to fetch.
     */
    where?: FinalConfirmationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinalConfirmations to fetch.
     */
    orderBy?: FinalConfirmationOrderByWithRelationInput | FinalConfirmationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinalConfirmations.
     */
    cursor?: FinalConfirmationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinalConfirmations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinalConfirmations.
     */
    skip?: number
    distinct?: FinalConfirmationScalarFieldEnum | FinalConfirmationScalarFieldEnum[]
  }

  /**
   * FinalConfirmation create
   */
  export type FinalConfirmationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * The data needed to create a FinalConfirmation.
     */
    data: XOR<FinalConfirmationCreateInput, FinalConfirmationUncheckedCreateInput>
  }

  /**
   * FinalConfirmation createMany
   */
  export type FinalConfirmationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinalConfirmations.
     */
    data: FinalConfirmationCreateManyInput | FinalConfirmationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinalConfirmation createManyAndReturn
   */
  export type FinalConfirmationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * The data used to create many FinalConfirmations.
     */
    data: FinalConfirmationCreateManyInput | FinalConfirmationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinalConfirmation update
   */
  export type FinalConfirmationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * The data needed to update a FinalConfirmation.
     */
    data: XOR<FinalConfirmationUpdateInput, FinalConfirmationUncheckedUpdateInput>
    /**
     * Choose, which FinalConfirmation to update.
     */
    where: FinalConfirmationWhereUniqueInput
  }

  /**
   * FinalConfirmation updateMany
   */
  export type FinalConfirmationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinalConfirmations.
     */
    data: XOR<FinalConfirmationUpdateManyMutationInput, FinalConfirmationUncheckedUpdateManyInput>
    /**
     * Filter which FinalConfirmations to update
     */
    where?: FinalConfirmationWhereInput
    /**
     * Limit how many FinalConfirmations to update.
     */
    limit?: number
  }

  /**
   * FinalConfirmation updateManyAndReturn
   */
  export type FinalConfirmationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * The data used to update FinalConfirmations.
     */
    data: XOR<FinalConfirmationUpdateManyMutationInput, FinalConfirmationUncheckedUpdateManyInput>
    /**
     * Filter which FinalConfirmations to update
     */
    where?: FinalConfirmationWhereInput
    /**
     * Limit how many FinalConfirmations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinalConfirmation upsert
   */
  export type FinalConfirmationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * The filter to search for the FinalConfirmation to update in case it exists.
     */
    where: FinalConfirmationWhereUniqueInput
    /**
     * In case the FinalConfirmation found by the `where` argument doesn't exist, create a new FinalConfirmation with this data.
     */
    create: XOR<FinalConfirmationCreateInput, FinalConfirmationUncheckedCreateInput>
    /**
     * In case the FinalConfirmation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinalConfirmationUpdateInput, FinalConfirmationUncheckedUpdateInput>
  }

  /**
   * FinalConfirmation delete
   */
  export type FinalConfirmationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
    /**
     * Filter which FinalConfirmation to delete.
     */
    where: FinalConfirmationWhereUniqueInput
  }

  /**
   * FinalConfirmation deleteMany
   */
  export type FinalConfirmationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinalConfirmations to delete
     */
    where?: FinalConfirmationWhereInput
    /**
     * Limit how many FinalConfirmations to delete.
     */
    limit?: number
  }

  /**
   * FinalConfirmation without action
   */
  export type FinalConfirmationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinalConfirmation
     */
    select?: FinalConfirmationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinalConfirmation
     */
    omit?: FinalConfirmationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalConfirmationInclude<ExtArgs> | null
  }


  /**
   * Model SmsHistory
   */

  export type AggregateSmsHistory = {
    _count: SmsHistoryCountAggregateOutputType | null
    _avg: SmsHistoryAvgAggregateOutputType | null
    _sum: SmsHistorySumAggregateOutputType | null
    _min: SmsHistoryMinAggregateOutputType | null
    _max: SmsHistoryMaxAggregateOutputType | null
  }

  export type SmsHistoryAvgAggregateOutputType = {
    id: number | null
    packId: number | null
    createdBy: number | null
  }

  export type SmsHistorySumAggregateOutputType = {
    id: number | null
    packId: number | null
    createdBy: number | null
  }

  export type SmsHistoryMinAggregateOutputType = {
    id: number | null
    packId: number | null
    recipientPhone: string | null
    recipientType: string | null
    text: string | null
    sentAt: Date | null
    status: string | null
    error: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SmsHistoryMaxAggregateOutputType = {
    id: number | null
    packId: number | null
    recipientPhone: string | null
    recipientType: string | null
    text: string | null
    sentAt: Date | null
    status: string | null
    error: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SmsHistoryCountAggregateOutputType = {
    id: number
    packId: number
    recipientPhone: number
    recipientType: number
    text: number
    sentAt: number
    status: number
    error: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SmsHistoryAvgAggregateInputType = {
    id?: true
    packId?: true
    createdBy?: true
  }

  export type SmsHistorySumAggregateInputType = {
    id?: true
    packId?: true
    createdBy?: true
  }

  export type SmsHistoryMinAggregateInputType = {
    id?: true
    packId?: true
    recipientPhone?: true
    recipientType?: true
    text?: true
    sentAt?: true
    status?: true
    error?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SmsHistoryMaxAggregateInputType = {
    id?: true
    packId?: true
    recipientPhone?: true
    recipientType?: true
    text?: true
    sentAt?: true
    status?: true
    error?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SmsHistoryCountAggregateInputType = {
    id?: true
    packId?: true
    recipientPhone?: true
    recipientType?: true
    text?: true
    sentAt?: true
    status?: true
    error?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SmsHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SmsHistory to aggregate.
     */
    where?: SmsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmsHistories to fetch.
     */
    orderBy?: SmsHistoryOrderByWithRelationInput | SmsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SmsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmsHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SmsHistories
    **/
    _count?: true | SmsHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SmsHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SmsHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SmsHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SmsHistoryMaxAggregateInputType
  }

  export type GetSmsHistoryAggregateType<T extends SmsHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSmsHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSmsHistory[P]>
      : GetScalarType<T[P], AggregateSmsHistory[P]>
  }




  export type SmsHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SmsHistoryWhereInput
    orderBy?: SmsHistoryOrderByWithAggregationInput | SmsHistoryOrderByWithAggregationInput[]
    by: SmsHistoryScalarFieldEnum[] | SmsHistoryScalarFieldEnum
    having?: SmsHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SmsHistoryCountAggregateInputType | true
    _avg?: SmsHistoryAvgAggregateInputType
    _sum?: SmsHistorySumAggregateInputType
    _min?: SmsHistoryMinAggregateInputType
    _max?: SmsHistoryMaxAggregateInputType
  }

  export type SmsHistoryGroupByOutputType = {
    id: number
    packId: number
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date
    status: string
    error: string | null
    createdBy: number
    createdAt: Date
    updatedAt: Date
    _count: SmsHistoryCountAggregateOutputType | null
    _avg: SmsHistoryAvgAggregateOutputType | null
    _sum: SmsHistorySumAggregateOutputType | null
    _min: SmsHistoryMinAggregateOutputType | null
    _max: SmsHistoryMaxAggregateOutputType | null
  }

  type GetSmsHistoryGroupByPayload<T extends SmsHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SmsHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SmsHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SmsHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], SmsHistoryGroupByOutputType[P]>
        }
      >
    >


  export type SmsHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    recipientPhone?: boolean
    recipientType?: boolean
    text?: boolean
    sentAt?: boolean
    status?: boolean
    error?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["smsHistory"]>

  export type SmsHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    recipientPhone?: boolean
    recipientType?: boolean
    text?: boolean
    sentAt?: boolean
    status?: boolean
    error?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["smsHistory"]>

  export type SmsHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    recipientPhone?: boolean
    recipientType?: boolean
    text?: boolean
    sentAt?: boolean
    status?: boolean
    error?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["smsHistory"]>

  export type SmsHistorySelectScalar = {
    id?: boolean
    packId?: boolean
    recipientPhone?: boolean
    recipientType?: boolean
    text?: boolean
    sentAt?: boolean
    status?: boolean
    error?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SmsHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "packId" | "recipientPhone" | "recipientType" | "text" | "sentAt" | "status" | "error" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["smsHistory"]>
  export type SmsHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }
  export type SmsHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }
  export type SmsHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }

  export type $SmsHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SmsHistory"
    objects: {
      pack: Prisma.$PackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packId: number
      recipientPhone: string
      recipientType: string
      text: string
      sentAt: Date
      status: string
      error: string | null
      createdBy: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["smsHistory"]>
    composites: {}
  }

  type SmsHistoryGetPayload<S extends boolean | null | undefined | SmsHistoryDefaultArgs> = $Result.GetResult<Prisma.$SmsHistoryPayload, S>

  type SmsHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SmsHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SmsHistoryCountAggregateInputType | true
    }

  export interface SmsHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SmsHistory'], meta: { name: 'SmsHistory' } }
    /**
     * Find zero or one SmsHistory that matches the filter.
     * @param {SmsHistoryFindUniqueArgs} args - Arguments to find a SmsHistory
     * @example
     * // Get one SmsHistory
     * const smsHistory = await prisma.smsHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SmsHistoryFindUniqueArgs>(args: SelectSubset<T, SmsHistoryFindUniqueArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SmsHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SmsHistoryFindUniqueOrThrowArgs} args - Arguments to find a SmsHistory
     * @example
     * // Get one SmsHistory
     * const smsHistory = await prisma.smsHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SmsHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SmsHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SmsHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryFindFirstArgs} args - Arguments to find a SmsHistory
     * @example
     * // Get one SmsHistory
     * const smsHistory = await prisma.smsHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SmsHistoryFindFirstArgs>(args?: SelectSubset<T, SmsHistoryFindFirstArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SmsHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryFindFirstOrThrowArgs} args - Arguments to find a SmsHistory
     * @example
     * // Get one SmsHistory
     * const smsHistory = await prisma.smsHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SmsHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SmsHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SmsHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SmsHistories
     * const smsHistories = await prisma.smsHistory.findMany()
     * 
     * // Get first 10 SmsHistories
     * const smsHistories = await prisma.smsHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const smsHistoryWithIdOnly = await prisma.smsHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SmsHistoryFindManyArgs>(args?: SelectSubset<T, SmsHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SmsHistory.
     * @param {SmsHistoryCreateArgs} args - Arguments to create a SmsHistory.
     * @example
     * // Create one SmsHistory
     * const SmsHistory = await prisma.smsHistory.create({
     *   data: {
     *     // ... data to create a SmsHistory
     *   }
     * })
     * 
     */
    create<T extends SmsHistoryCreateArgs>(args: SelectSubset<T, SmsHistoryCreateArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SmsHistories.
     * @param {SmsHistoryCreateManyArgs} args - Arguments to create many SmsHistories.
     * @example
     * // Create many SmsHistories
     * const smsHistory = await prisma.smsHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SmsHistoryCreateManyArgs>(args?: SelectSubset<T, SmsHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SmsHistories and returns the data saved in the database.
     * @param {SmsHistoryCreateManyAndReturnArgs} args - Arguments to create many SmsHistories.
     * @example
     * // Create many SmsHistories
     * const smsHistory = await prisma.smsHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SmsHistories and only return the `id`
     * const smsHistoryWithIdOnly = await prisma.smsHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SmsHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, SmsHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SmsHistory.
     * @param {SmsHistoryDeleteArgs} args - Arguments to delete one SmsHistory.
     * @example
     * // Delete one SmsHistory
     * const SmsHistory = await prisma.smsHistory.delete({
     *   where: {
     *     // ... filter to delete one SmsHistory
     *   }
     * })
     * 
     */
    delete<T extends SmsHistoryDeleteArgs>(args: SelectSubset<T, SmsHistoryDeleteArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SmsHistory.
     * @param {SmsHistoryUpdateArgs} args - Arguments to update one SmsHistory.
     * @example
     * // Update one SmsHistory
     * const smsHistory = await prisma.smsHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SmsHistoryUpdateArgs>(args: SelectSubset<T, SmsHistoryUpdateArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SmsHistories.
     * @param {SmsHistoryDeleteManyArgs} args - Arguments to filter SmsHistories to delete.
     * @example
     * // Delete a few SmsHistories
     * const { count } = await prisma.smsHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SmsHistoryDeleteManyArgs>(args?: SelectSubset<T, SmsHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmsHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SmsHistories
     * const smsHistory = await prisma.smsHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SmsHistoryUpdateManyArgs>(args: SelectSubset<T, SmsHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmsHistories and returns the data updated in the database.
     * @param {SmsHistoryUpdateManyAndReturnArgs} args - Arguments to update many SmsHistories.
     * @example
     * // Update many SmsHistories
     * const smsHistory = await prisma.smsHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SmsHistories and only return the `id`
     * const smsHistoryWithIdOnly = await prisma.smsHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SmsHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, SmsHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SmsHistory.
     * @param {SmsHistoryUpsertArgs} args - Arguments to update or create a SmsHistory.
     * @example
     * // Update or create a SmsHistory
     * const smsHistory = await prisma.smsHistory.upsert({
     *   create: {
     *     // ... data to create a SmsHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SmsHistory we want to update
     *   }
     * })
     */
    upsert<T extends SmsHistoryUpsertArgs>(args: SelectSubset<T, SmsHistoryUpsertArgs<ExtArgs>>): Prisma__SmsHistoryClient<$Result.GetResult<Prisma.$SmsHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SmsHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryCountArgs} args - Arguments to filter SmsHistories to count.
     * @example
     * // Count the number of SmsHistories
     * const count = await prisma.smsHistory.count({
     *   where: {
     *     // ... the filter for the SmsHistories we want to count
     *   }
     * })
    **/
    count<T extends SmsHistoryCountArgs>(
      args?: Subset<T, SmsHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SmsHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SmsHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SmsHistoryAggregateArgs>(args: Subset<T, SmsHistoryAggregateArgs>): Prisma.PrismaPromise<GetSmsHistoryAggregateType<T>>

    /**
     * Group by SmsHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SmsHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SmsHistoryGroupByArgs['orderBy'] }
        : { orderBy?: SmsHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SmsHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSmsHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SmsHistory model
   */
  readonly fields: SmsHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SmsHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SmsHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pack<T extends PackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackDefaultArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SmsHistory model
   */
  interface SmsHistoryFieldRefs {
    readonly id: FieldRef<"SmsHistory", 'Int'>
    readonly packId: FieldRef<"SmsHistory", 'Int'>
    readonly recipientPhone: FieldRef<"SmsHistory", 'String'>
    readonly recipientType: FieldRef<"SmsHistory", 'String'>
    readonly text: FieldRef<"SmsHistory", 'String'>
    readonly sentAt: FieldRef<"SmsHistory", 'DateTime'>
    readonly status: FieldRef<"SmsHistory", 'String'>
    readonly error: FieldRef<"SmsHistory", 'String'>
    readonly createdBy: FieldRef<"SmsHistory", 'Int'>
    readonly createdAt: FieldRef<"SmsHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"SmsHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SmsHistory findUnique
   */
  export type SmsHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SmsHistory to fetch.
     */
    where: SmsHistoryWhereUniqueInput
  }

  /**
   * SmsHistory findUniqueOrThrow
   */
  export type SmsHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SmsHistory to fetch.
     */
    where: SmsHistoryWhereUniqueInput
  }

  /**
   * SmsHistory findFirst
   */
  export type SmsHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SmsHistory to fetch.
     */
    where?: SmsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmsHistories to fetch.
     */
    orderBy?: SmsHistoryOrderByWithRelationInput | SmsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SmsHistories.
     */
    cursor?: SmsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmsHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SmsHistories.
     */
    distinct?: SmsHistoryScalarFieldEnum | SmsHistoryScalarFieldEnum[]
  }

  /**
   * SmsHistory findFirstOrThrow
   */
  export type SmsHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SmsHistory to fetch.
     */
    where?: SmsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmsHistories to fetch.
     */
    orderBy?: SmsHistoryOrderByWithRelationInput | SmsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SmsHistories.
     */
    cursor?: SmsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmsHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SmsHistories.
     */
    distinct?: SmsHistoryScalarFieldEnum | SmsHistoryScalarFieldEnum[]
  }

  /**
   * SmsHistory findMany
   */
  export type SmsHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SmsHistories to fetch.
     */
    where?: SmsHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SmsHistories to fetch.
     */
    orderBy?: SmsHistoryOrderByWithRelationInput | SmsHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SmsHistories.
     */
    cursor?: SmsHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SmsHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SmsHistories.
     */
    skip?: number
    distinct?: SmsHistoryScalarFieldEnum | SmsHistoryScalarFieldEnum[]
  }

  /**
   * SmsHistory create
   */
  export type SmsHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SmsHistory.
     */
    data: XOR<SmsHistoryCreateInput, SmsHistoryUncheckedCreateInput>
  }

  /**
   * SmsHistory createMany
   */
  export type SmsHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SmsHistories.
     */
    data: SmsHistoryCreateManyInput | SmsHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SmsHistory createManyAndReturn
   */
  export type SmsHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many SmsHistories.
     */
    data: SmsHistoryCreateManyInput | SmsHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SmsHistory update
   */
  export type SmsHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SmsHistory.
     */
    data: XOR<SmsHistoryUpdateInput, SmsHistoryUncheckedUpdateInput>
    /**
     * Choose, which SmsHistory to update.
     */
    where: SmsHistoryWhereUniqueInput
  }

  /**
   * SmsHistory updateMany
   */
  export type SmsHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SmsHistories.
     */
    data: XOR<SmsHistoryUpdateManyMutationInput, SmsHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SmsHistories to update
     */
    where?: SmsHistoryWhereInput
    /**
     * Limit how many SmsHistories to update.
     */
    limit?: number
  }

  /**
   * SmsHistory updateManyAndReturn
   */
  export type SmsHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * The data used to update SmsHistories.
     */
    data: XOR<SmsHistoryUpdateManyMutationInput, SmsHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SmsHistories to update
     */
    where?: SmsHistoryWhereInput
    /**
     * Limit how many SmsHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SmsHistory upsert
   */
  export type SmsHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SmsHistory to update in case it exists.
     */
    where: SmsHistoryWhereUniqueInput
    /**
     * In case the SmsHistory found by the `where` argument doesn't exist, create a new SmsHistory with this data.
     */
    create: XOR<SmsHistoryCreateInput, SmsHistoryUncheckedCreateInput>
    /**
     * In case the SmsHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SmsHistoryUpdateInput, SmsHistoryUncheckedUpdateInput>
  }

  /**
   * SmsHistory delete
   */
  export type SmsHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
    /**
     * Filter which SmsHistory to delete.
     */
    where: SmsHistoryWhereUniqueInput
  }

  /**
   * SmsHistory deleteMany
   */
  export type SmsHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SmsHistories to delete
     */
    where?: SmsHistoryWhereInput
    /**
     * Limit how many SmsHistories to delete.
     */
    limit?: number
  }

  /**
   * SmsHistory without action
   */
  export type SmsHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SmsHistory
     */
    select?: SmsHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SmsHistory
     */
    omit?: SmsHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SmsHistoryInclude<ExtArgs> | null
  }


  /**
   * Model PackHistory
   */

  export type AggregatePackHistory = {
    _count: PackHistoryCountAggregateOutputType | null
    _avg: PackHistoryAvgAggregateOutputType | null
    _sum: PackHistorySumAggregateOutputType | null
    _min: PackHistoryMinAggregateOutputType | null
    _max: PackHistoryMaxAggregateOutputType | null
  }

  export type PackHistoryAvgAggregateOutputType = {
    id: number | null
    packId: number | null
  }

  export type PackHistorySumAggregateOutputType = {
    id: number | null
    packId: number | null
  }

  export type PackHistoryMinAggregateOutputType = {
    id: number | null
    packId: number | null
    status: string | null
    changedAt: Date | null
  }

  export type PackHistoryMaxAggregateOutputType = {
    id: number | null
    packId: number | null
    status: string | null
    changedAt: Date | null
  }

  export type PackHistoryCountAggregateOutputType = {
    id: number
    packId: number
    status: number
    changedAt: number
    _all: number
  }


  export type PackHistoryAvgAggregateInputType = {
    id?: true
    packId?: true
  }

  export type PackHistorySumAggregateInputType = {
    id?: true
    packId?: true
  }

  export type PackHistoryMinAggregateInputType = {
    id?: true
    packId?: true
    status?: true
    changedAt?: true
  }

  export type PackHistoryMaxAggregateInputType = {
    id?: true
    packId?: true
    status?: true
    changedAt?: true
  }

  export type PackHistoryCountAggregateInputType = {
    id?: true
    packId?: true
    status?: true
    changedAt?: true
    _all?: true
  }

  export type PackHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackHistory to aggregate.
     */
    where?: PackHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackHistories to fetch.
     */
    orderBy?: PackHistoryOrderByWithRelationInput | PackHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackHistories
    **/
    _count?: true | PackHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackHistoryMaxAggregateInputType
  }

  export type GetPackHistoryAggregateType<T extends PackHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePackHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackHistory[P]>
      : GetScalarType<T[P], AggregatePackHistory[P]>
  }




  export type PackHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackHistoryWhereInput
    orderBy?: PackHistoryOrderByWithAggregationInput | PackHistoryOrderByWithAggregationInput[]
    by: PackHistoryScalarFieldEnum[] | PackHistoryScalarFieldEnum
    having?: PackHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackHistoryCountAggregateInputType | true
    _avg?: PackHistoryAvgAggregateInputType
    _sum?: PackHistorySumAggregateInputType
    _min?: PackHistoryMinAggregateInputType
    _max?: PackHistoryMaxAggregateInputType
  }

  export type PackHistoryGroupByOutputType = {
    id: number
    packId: number
    status: string
    changedAt: Date
    _count: PackHistoryCountAggregateOutputType | null
    _avg: PackHistoryAvgAggregateOutputType | null
    _sum: PackHistorySumAggregateOutputType | null
    _min: PackHistoryMinAggregateOutputType | null
    _max: PackHistoryMaxAggregateOutputType | null
  }

  type GetPackHistoryGroupByPayload<T extends PackHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PackHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PackHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    status?: boolean
    changedAt?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packHistory"]>

  export type PackHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    status?: boolean
    changedAt?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packHistory"]>

  export type PackHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    status?: boolean
    changedAt?: boolean
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packHistory"]>

  export type PackHistorySelectScalar = {
    id?: boolean
    packId?: boolean
    status?: boolean
    changedAt?: boolean
  }

  export type PackHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "packId" | "status" | "changedAt", ExtArgs["result"]["packHistory"]>
  export type PackHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }
  export type PackHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }
  export type PackHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pack?: boolean | PackDefaultArgs<ExtArgs>
  }

  export type $PackHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackHistory"
    objects: {
      pack: Prisma.$PackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packId: number
      status: string
      changedAt: Date
    }, ExtArgs["result"]["packHistory"]>
    composites: {}
  }

  type PackHistoryGetPayload<S extends boolean | null | undefined | PackHistoryDefaultArgs> = $Result.GetResult<Prisma.$PackHistoryPayload, S>

  type PackHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackHistoryCountAggregateInputType | true
    }

  export interface PackHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackHistory'], meta: { name: 'PackHistory' } }
    /**
     * Find zero or one PackHistory that matches the filter.
     * @param {PackHistoryFindUniqueArgs} args - Arguments to find a PackHistory
     * @example
     * // Get one PackHistory
     * const packHistory = await prisma.packHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackHistoryFindUniqueArgs>(args: SelectSubset<T, PackHistoryFindUniqueArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PackHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackHistoryFindUniqueOrThrowArgs} args - Arguments to find a PackHistory
     * @example
     * // Get one PackHistory
     * const packHistory = await prisma.packHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PackHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryFindFirstArgs} args - Arguments to find a PackHistory
     * @example
     * // Get one PackHistory
     * const packHistory = await prisma.packHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackHistoryFindFirstArgs>(args?: SelectSubset<T, PackHistoryFindFirstArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryFindFirstOrThrowArgs} args - Arguments to find a PackHistory
     * @example
     * // Get one PackHistory
     * const packHistory = await prisma.packHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PackHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PackHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackHistories
     * const packHistories = await prisma.packHistory.findMany()
     * 
     * // Get first 10 PackHistories
     * const packHistories = await prisma.packHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packHistoryWithIdOnly = await prisma.packHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackHistoryFindManyArgs>(args?: SelectSubset<T, PackHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PackHistory.
     * @param {PackHistoryCreateArgs} args - Arguments to create a PackHistory.
     * @example
     * // Create one PackHistory
     * const PackHistory = await prisma.packHistory.create({
     *   data: {
     *     // ... data to create a PackHistory
     *   }
     * })
     * 
     */
    create<T extends PackHistoryCreateArgs>(args: SelectSubset<T, PackHistoryCreateArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PackHistories.
     * @param {PackHistoryCreateManyArgs} args - Arguments to create many PackHistories.
     * @example
     * // Create many PackHistories
     * const packHistory = await prisma.packHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackHistoryCreateManyArgs>(args?: SelectSubset<T, PackHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackHistories and returns the data saved in the database.
     * @param {PackHistoryCreateManyAndReturnArgs} args - Arguments to create many PackHistories.
     * @example
     * // Create many PackHistories
     * const packHistory = await prisma.packHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackHistories and only return the `id`
     * const packHistoryWithIdOnly = await prisma.packHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PackHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PackHistory.
     * @param {PackHistoryDeleteArgs} args - Arguments to delete one PackHistory.
     * @example
     * // Delete one PackHistory
     * const PackHistory = await prisma.packHistory.delete({
     *   where: {
     *     // ... filter to delete one PackHistory
     *   }
     * })
     * 
     */
    delete<T extends PackHistoryDeleteArgs>(args: SelectSubset<T, PackHistoryDeleteArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PackHistory.
     * @param {PackHistoryUpdateArgs} args - Arguments to update one PackHistory.
     * @example
     * // Update one PackHistory
     * const packHistory = await prisma.packHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackHistoryUpdateArgs>(args: SelectSubset<T, PackHistoryUpdateArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PackHistories.
     * @param {PackHistoryDeleteManyArgs} args - Arguments to filter PackHistories to delete.
     * @example
     * // Delete a few PackHistories
     * const { count } = await prisma.packHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackHistoryDeleteManyArgs>(args?: SelectSubset<T, PackHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackHistories
     * const packHistory = await prisma.packHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackHistoryUpdateManyArgs>(args: SelectSubset<T, PackHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackHistories and returns the data updated in the database.
     * @param {PackHistoryUpdateManyAndReturnArgs} args - Arguments to update many PackHistories.
     * @example
     * // Update many PackHistories
     * const packHistory = await prisma.packHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PackHistories and only return the `id`
     * const packHistoryWithIdOnly = await prisma.packHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, PackHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PackHistory.
     * @param {PackHistoryUpsertArgs} args - Arguments to update or create a PackHistory.
     * @example
     * // Update or create a PackHistory
     * const packHistory = await prisma.packHistory.upsert({
     *   create: {
     *     // ... data to create a PackHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackHistory we want to update
     *   }
     * })
     */
    upsert<T extends PackHistoryUpsertArgs>(args: SelectSubset<T, PackHistoryUpsertArgs<ExtArgs>>): Prisma__PackHistoryClient<$Result.GetResult<Prisma.$PackHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PackHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryCountArgs} args - Arguments to filter PackHistories to count.
     * @example
     * // Count the number of PackHistories
     * const count = await prisma.packHistory.count({
     *   where: {
     *     // ... the filter for the PackHistories we want to count
     *   }
     * })
    **/
    count<T extends PackHistoryCountArgs>(
      args?: Subset<T, PackHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackHistoryAggregateArgs>(args: Subset<T, PackHistoryAggregateArgs>): Prisma.PrismaPromise<GetPackHistoryAggregateType<T>>

    /**
     * Group by PackHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PackHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackHistory model
   */
  readonly fields: PackHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pack<T extends PackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackDefaultArgs<ExtArgs>>): Prisma__PackClient<$Result.GetResult<Prisma.$PackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackHistory model
   */
  interface PackHistoryFieldRefs {
    readonly id: FieldRef<"PackHistory", 'Int'>
    readonly packId: FieldRef<"PackHistory", 'Int'>
    readonly status: FieldRef<"PackHistory", 'String'>
    readonly changedAt: FieldRef<"PackHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PackHistory findUnique
   */
  export type PackHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PackHistory to fetch.
     */
    where: PackHistoryWhereUniqueInput
  }

  /**
   * PackHistory findUniqueOrThrow
   */
  export type PackHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PackHistory to fetch.
     */
    where: PackHistoryWhereUniqueInput
  }

  /**
   * PackHistory findFirst
   */
  export type PackHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PackHistory to fetch.
     */
    where?: PackHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackHistories to fetch.
     */
    orderBy?: PackHistoryOrderByWithRelationInput | PackHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackHistories.
     */
    cursor?: PackHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackHistories.
     */
    distinct?: PackHistoryScalarFieldEnum | PackHistoryScalarFieldEnum[]
  }

  /**
   * PackHistory findFirstOrThrow
   */
  export type PackHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PackHistory to fetch.
     */
    where?: PackHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackHistories to fetch.
     */
    orderBy?: PackHistoryOrderByWithRelationInput | PackHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackHistories.
     */
    cursor?: PackHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackHistories.
     */
    distinct?: PackHistoryScalarFieldEnum | PackHistoryScalarFieldEnum[]
  }

  /**
   * PackHistory findMany
   */
  export type PackHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PackHistories to fetch.
     */
    where?: PackHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackHistories to fetch.
     */
    orderBy?: PackHistoryOrderByWithRelationInput | PackHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackHistories.
     */
    cursor?: PackHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackHistories.
     */
    skip?: number
    distinct?: PackHistoryScalarFieldEnum | PackHistoryScalarFieldEnum[]
  }

  /**
   * PackHistory create
   */
  export type PackHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PackHistory.
     */
    data: XOR<PackHistoryCreateInput, PackHistoryUncheckedCreateInput>
  }

  /**
   * PackHistory createMany
   */
  export type PackHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackHistories.
     */
    data: PackHistoryCreateManyInput | PackHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackHistory createManyAndReturn
   */
  export type PackHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many PackHistories.
     */
    data: PackHistoryCreateManyInput | PackHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackHistory update
   */
  export type PackHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PackHistory.
     */
    data: XOR<PackHistoryUpdateInput, PackHistoryUncheckedUpdateInput>
    /**
     * Choose, which PackHistory to update.
     */
    where: PackHistoryWhereUniqueInput
  }

  /**
   * PackHistory updateMany
   */
  export type PackHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackHistories.
     */
    data: XOR<PackHistoryUpdateManyMutationInput, PackHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PackHistories to update
     */
    where?: PackHistoryWhereInput
    /**
     * Limit how many PackHistories to update.
     */
    limit?: number
  }

  /**
   * PackHistory updateManyAndReturn
   */
  export type PackHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * The data used to update PackHistories.
     */
    data: XOR<PackHistoryUpdateManyMutationInput, PackHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PackHistories to update
     */
    where?: PackHistoryWhereInput
    /**
     * Limit how many PackHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackHistory upsert
   */
  export type PackHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PackHistory to update in case it exists.
     */
    where: PackHistoryWhereUniqueInput
    /**
     * In case the PackHistory found by the `where` argument doesn't exist, create a new PackHistory with this data.
     */
    create: XOR<PackHistoryCreateInput, PackHistoryUncheckedCreateInput>
    /**
     * In case the PackHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackHistoryUpdateInput, PackHistoryUncheckedUpdateInput>
  }

  /**
   * PackHistory delete
   */
  export type PackHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
    /**
     * Filter which PackHistory to delete.
     */
    where: PackHistoryWhereUniqueInput
  }

  /**
   * PackHistory deleteMany
   */
  export type PackHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackHistories to delete
     */
    where?: PackHistoryWhereInput
    /**
     * Limit how many PackHistories to delete.
     */
    limit?: number
  }

  /**
   * PackHistory without action
   */
  export type PackHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackHistory
     */
    select?: PackHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackHistory
     */
    omit?: PackHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ArchivedPack
   */

  export type AggregateArchivedPack = {
    _count: ArchivedPackCountAggregateOutputType | null
    _avg: ArchivedPackAvgAggregateOutputType | null
    _sum: ArchivedPackSumAggregateOutputType | null
    _min: ArchivedPackMinAggregateOutputType | null
    _max: ArchivedPackMaxAggregateOutputType | null
  }

  export type ArchivedPackAvgAggregateOutputType = {
    id: number | null
    packId: number | null
    repository: number | null
  }

  export type ArchivedPackSumAggregateOutputType = {
    id: number | null
    packId: number | null
    repository: number | null
  }

  export type ArchivedPackMinAggregateOutputType = {
    id: number | null
    packId: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
    repository: number | null
    status: $Enums.PackStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    archivedAt: Date | null
  }

  export type ArchivedPackMaxAggregateOutputType = {
    id: number | null
    packId: number | null
    travelDate: Date | null
    type: $Enums.PackType | null
    repository: number | null
    status: $Enums.PackStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    archivedAt: Date | null
  }

  export type ArchivedPackCountAggregateOutputType = {
    id: number
    packId: number
    travelDate: number
    type: number
    repository: number
    status: number
    passengers: number
    busAssignment: number
    createdAt: number
    updatedAt: number
    archivedAt: number
    _all: number
  }


  export type ArchivedPackAvgAggregateInputType = {
    id?: true
    packId?: true
    repository?: true
  }

  export type ArchivedPackSumAggregateInputType = {
    id?: true
    packId?: true
    repository?: true
  }

  export type ArchivedPackMinAggregateInputType = {
    id?: true
    packId?: true
    travelDate?: true
    type?: true
    repository?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    archivedAt?: true
  }

  export type ArchivedPackMaxAggregateInputType = {
    id?: true
    packId?: true
    travelDate?: true
    type?: true
    repository?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    archivedAt?: true
  }

  export type ArchivedPackCountAggregateInputType = {
    id?: true
    packId?: true
    travelDate?: true
    type?: true
    repository?: true
    status?: true
    passengers?: true
    busAssignment?: true
    createdAt?: true
    updatedAt?: true
    archivedAt?: true
    _all?: true
  }

  export type ArchivedPackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedPack to aggregate.
     */
    where?: ArchivedPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedPacks to fetch.
     */
    orderBy?: ArchivedPackOrderByWithRelationInput | ArchivedPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchivedPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedPacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchivedPacks
    **/
    _count?: true | ArchivedPackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArchivedPackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArchivedPackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchivedPackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchivedPackMaxAggregateInputType
  }

  export type GetArchivedPackAggregateType<T extends ArchivedPackAggregateArgs> = {
        [P in keyof T & keyof AggregateArchivedPack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchivedPack[P]>
      : GetScalarType<T[P], AggregateArchivedPack[P]>
  }




  export type ArchivedPackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedPackWhereInput
    orderBy?: ArchivedPackOrderByWithAggregationInput | ArchivedPackOrderByWithAggregationInput[]
    by: ArchivedPackScalarFieldEnum[] | ArchivedPackScalarFieldEnum
    having?: ArchivedPackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchivedPackCountAggregateInputType | true
    _avg?: ArchivedPackAvgAggregateInputType
    _sum?: ArchivedPackSumAggregateInputType
    _min?: ArchivedPackMinAggregateInputType
    _max?: ArchivedPackMaxAggregateInputType
  }

  export type ArchivedPackGroupByOutputType = {
    id: number
    packId: number
    travelDate: Date
    type: $Enums.PackType
    repository: number
    status: $Enums.PackStatus
    passengers: JsonValue
    busAssignment: JsonValue | null
    createdAt: Date
    updatedAt: Date
    archivedAt: Date
    _count: ArchivedPackCountAggregateOutputType | null
    _avg: ArchivedPackAvgAggregateOutputType | null
    _sum: ArchivedPackSumAggregateOutputType | null
    _min: ArchivedPackMinAggregateOutputType | null
    _max: ArchivedPackMaxAggregateOutputType | null
  }

  type GetArchivedPackGroupByPayload<T extends ArchivedPackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchivedPackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchivedPackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchivedPackGroupByOutputType[P]>
            : GetScalarType<T[P], ArchivedPackGroupByOutputType[P]>
        }
      >
    >


  export type ArchivedPackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    passengers?: boolean
    busAssignment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
  }, ExtArgs["result"]["archivedPack"]>

  export type ArchivedPackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    passengers?: boolean
    busAssignment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
  }, ExtArgs["result"]["archivedPack"]>

  export type ArchivedPackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    passengers?: boolean
    busAssignment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
  }, ExtArgs["result"]["archivedPack"]>

  export type ArchivedPackSelectScalar = {
    id?: boolean
    packId?: boolean
    travelDate?: boolean
    type?: boolean
    repository?: boolean
    status?: boolean
    passengers?: boolean
    busAssignment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
  }

  export type ArchivedPackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "packId" | "travelDate" | "type" | "repository" | "status" | "passengers" | "busAssignment" | "createdAt" | "updatedAt" | "archivedAt", ExtArgs["result"]["archivedPack"]>

  export type $ArchivedPackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchivedPack"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packId: number
      travelDate: Date
      type: $Enums.PackType
      repository: number
      status: $Enums.PackStatus
      passengers: Prisma.JsonValue
      busAssignment: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      archivedAt: Date
    }, ExtArgs["result"]["archivedPack"]>
    composites: {}
  }

  type ArchivedPackGetPayload<S extends boolean | null | undefined | ArchivedPackDefaultArgs> = $Result.GetResult<Prisma.$ArchivedPackPayload, S>

  type ArchivedPackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArchivedPackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArchivedPackCountAggregateInputType | true
    }

  export interface ArchivedPackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchivedPack'], meta: { name: 'ArchivedPack' } }
    /**
     * Find zero or one ArchivedPack that matches the filter.
     * @param {ArchivedPackFindUniqueArgs} args - Arguments to find a ArchivedPack
     * @example
     * // Get one ArchivedPack
     * const archivedPack = await prisma.archivedPack.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchivedPackFindUniqueArgs>(args: SelectSubset<T, ArchivedPackFindUniqueArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ArchivedPack that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArchivedPackFindUniqueOrThrowArgs} args - Arguments to find a ArchivedPack
     * @example
     * // Get one ArchivedPack
     * const archivedPack = await prisma.archivedPack.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchivedPackFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchivedPackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArchivedPack that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackFindFirstArgs} args - Arguments to find a ArchivedPack
     * @example
     * // Get one ArchivedPack
     * const archivedPack = await prisma.archivedPack.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchivedPackFindFirstArgs>(args?: SelectSubset<T, ArchivedPackFindFirstArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArchivedPack that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackFindFirstOrThrowArgs} args - Arguments to find a ArchivedPack
     * @example
     * // Get one ArchivedPack
     * const archivedPack = await prisma.archivedPack.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchivedPackFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchivedPackFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ArchivedPacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchivedPacks
     * const archivedPacks = await prisma.archivedPack.findMany()
     * 
     * // Get first 10 ArchivedPacks
     * const archivedPacks = await prisma.archivedPack.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const archivedPackWithIdOnly = await prisma.archivedPack.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArchivedPackFindManyArgs>(args?: SelectSubset<T, ArchivedPackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ArchivedPack.
     * @param {ArchivedPackCreateArgs} args - Arguments to create a ArchivedPack.
     * @example
     * // Create one ArchivedPack
     * const ArchivedPack = await prisma.archivedPack.create({
     *   data: {
     *     // ... data to create a ArchivedPack
     *   }
     * })
     * 
     */
    create<T extends ArchivedPackCreateArgs>(args: SelectSubset<T, ArchivedPackCreateArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ArchivedPacks.
     * @param {ArchivedPackCreateManyArgs} args - Arguments to create many ArchivedPacks.
     * @example
     * // Create many ArchivedPacks
     * const archivedPack = await prisma.archivedPack.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchivedPackCreateManyArgs>(args?: SelectSubset<T, ArchivedPackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArchivedPacks and returns the data saved in the database.
     * @param {ArchivedPackCreateManyAndReturnArgs} args - Arguments to create many ArchivedPacks.
     * @example
     * // Create many ArchivedPacks
     * const archivedPack = await prisma.archivedPack.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArchivedPacks and only return the `id`
     * const archivedPackWithIdOnly = await prisma.archivedPack.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArchivedPackCreateManyAndReturnArgs>(args?: SelectSubset<T, ArchivedPackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ArchivedPack.
     * @param {ArchivedPackDeleteArgs} args - Arguments to delete one ArchivedPack.
     * @example
     * // Delete one ArchivedPack
     * const ArchivedPack = await prisma.archivedPack.delete({
     *   where: {
     *     // ... filter to delete one ArchivedPack
     *   }
     * })
     * 
     */
    delete<T extends ArchivedPackDeleteArgs>(args: SelectSubset<T, ArchivedPackDeleteArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ArchivedPack.
     * @param {ArchivedPackUpdateArgs} args - Arguments to update one ArchivedPack.
     * @example
     * // Update one ArchivedPack
     * const archivedPack = await prisma.archivedPack.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchivedPackUpdateArgs>(args: SelectSubset<T, ArchivedPackUpdateArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ArchivedPacks.
     * @param {ArchivedPackDeleteManyArgs} args - Arguments to filter ArchivedPacks to delete.
     * @example
     * // Delete a few ArchivedPacks
     * const { count } = await prisma.archivedPack.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchivedPackDeleteManyArgs>(args?: SelectSubset<T, ArchivedPackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedPacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchivedPacks
     * const archivedPack = await prisma.archivedPack.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchivedPackUpdateManyArgs>(args: SelectSubset<T, ArchivedPackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedPacks and returns the data updated in the database.
     * @param {ArchivedPackUpdateManyAndReturnArgs} args - Arguments to update many ArchivedPacks.
     * @example
     * // Update many ArchivedPacks
     * const archivedPack = await prisma.archivedPack.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ArchivedPacks and only return the `id`
     * const archivedPackWithIdOnly = await prisma.archivedPack.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ArchivedPackUpdateManyAndReturnArgs>(args: SelectSubset<T, ArchivedPackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ArchivedPack.
     * @param {ArchivedPackUpsertArgs} args - Arguments to update or create a ArchivedPack.
     * @example
     * // Update or create a ArchivedPack
     * const archivedPack = await prisma.archivedPack.upsert({
     *   create: {
     *     // ... data to create a ArchivedPack
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchivedPack we want to update
     *   }
     * })
     */
    upsert<T extends ArchivedPackUpsertArgs>(args: SelectSubset<T, ArchivedPackUpsertArgs<ExtArgs>>): Prisma__ArchivedPackClient<$Result.GetResult<Prisma.$ArchivedPackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ArchivedPacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackCountArgs} args - Arguments to filter ArchivedPacks to count.
     * @example
     * // Count the number of ArchivedPacks
     * const count = await prisma.archivedPack.count({
     *   where: {
     *     // ... the filter for the ArchivedPacks we want to count
     *   }
     * })
    **/
    count<T extends ArchivedPackCountArgs>(
      args?: Subset<T, ArchivedPackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchivedPackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchivedPack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchivedPackAggregateArgs>(args: Subset<T, ArchivedPackAggregateArgs>): Prisma.PrismaPromise<GetArchivedPackAggregateType<T>>

    /**
     * Group by ArchivedPack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedPackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchivedPackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchivedPackGroupByArgs['orderBy'] }
        : { orderBy?: ArchivedPackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchivedPackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchivedPackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchivedPack model
   */
  readonly fields: ArchivedPackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchivedPack.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchivedPackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchivedPack model
   */
  interface ArchivedPackFieldRefs {
    readonly id: FieldRef<"ArchivedPack", 'Int'>
    readonly packId: FieldRef<"ArchivedPack", 'Int'>
    readonly travelDate: FieldRef<"ArchivedPack", 'DateTime'>
    readonly type: FieldRef<"ArchivedPack", 'PackType'>
    readonly repository: FieldRef<"ArchivedPack", 'Int'>
    readonly status: FieldRef<"ArchivedPack", 'PackStatus'>
    readonly passengers: FieldRef<"ArchivedPack", 'Json'>
    readonly busAssignment: FieldRef<"ArchivedPack", 'Json'>
    readonly createdAt: FieldRef<"ArchivedPack", 'DateTime'>
    readonly updatedAt: FieldRef<"ArchivedPack", 'DateTime'>
    readonly archivedAt: FieldRef<"ArchivedPack", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ArchivedPack findUnique
   */
  export type ArchivedPackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * Filter, which ArchivedPack to fetch.
     */
    where: ArchivedPackWhereUniqueInput
  }

  /**
   * ArchivedPack findUniqueOrThrow
   */
  export type ArchivedPackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * Filter, which ArchivedPack to fetch.
     */
    where: ArchivedPackWhereUniqueInput
  }

  /**
   * ArchivedPack findFirst
   */
  export type ArchivedPackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * Filter, which ArchivedPack to fetch.
     */
    where?: ArchivedPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedPacks to fetch.
     */
    orderBy?: ArchivedPackOrderByWithRelationInput | ArchivedPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedPacks.
     */
    cursor?: ArchivedPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedPacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedPacks.
     */
    distinct?: ArchivedPackScalarFieldEnum | ArchivedPackScalarFieldEnum[]
  }

  /**
   * ArchivedPack findFirstOrThrow
   */
  export type ArchivedPackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * Filter, which ArchivedPack to fetch.
     */
    where?: ArchivedPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedPacks to fetch.
     */
    orderBy?: ArchivedPackOrderByWithRelationInput | ArchivedPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedPacks.
     */
    cursor?: ArchivedPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedPacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedPacks.
     */
    distinct?: ArchivedPackScalarFieldEnum | ArchivedPackScalarFieldEnum[]
  }

  /**
   * ArchivedPack findMany
   */
  export type ArchivedPackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * Filter, which ArchivedPacks to fetch.
     */
    where?: ArchivedPackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedPacks to fetch.
     */
    orderBy?: ArchivedPackOrderByWithRelationInput | ArchivedPackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchivedPacks.
     */
    cursor?: ArchivedPackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedPacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedPacks.
     */
    skip?: number
    distinct?: ArchivedPackScalarFieldEnum | ArchivedPackScalarFieldEnum[]
  }

  /**
   * ArchivedPack create
   */
  export type ArchivedPackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * The data needed to create a ArchivedPack.
     */
    data: XOR<ArchivedPackCreateInput, ArchivedPackUncheckedCreateInput>
  }

  /**
   * ArchivedPack createMany
   */
  export type ArchivedPackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchivedPacks.
     */
    data: ArchivedPackCreateManyInput | ArchivedPackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchivedPack createManyAndReturn
   */
  export type ArchivedPackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * The data used to create many ArchivedPacks.
     */
    data: ArchivedPackCreateManyInput | ArchivedPackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArchivedPack update
   */
  export type ArchivedPackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * The data needed to update a ArchivedPack.
     */
    data: XOR<ArchivedPackUpdateInput, ArchivedPackUncheckedUpdateInput>
    /**
     * Choose, which ArchivedPack to update.
     */
    where: ArchivedPackWhereUniqueInput
  }

  /**
   * ArchivedPack updateMany
   */
  export type ArchivedPackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchivedPacks.
     */
    data: XOR<ArchivedPackUpdateManyMutationInput, ArchivedPackUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedPacks to update
     */
    where?: ArchivedPackWhereInput
    /**
     * Limit how many ArchivedPacks to update.
     */
    limit?: number
  }

  /**
   * ArchivedPack updateManyAndReturn
   */
  export type ArchivedPackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * The data used to update ArchivedPacks.
     */
    data: XOR<ArchivedPackUpdateManyMutationInput, ArchivedPackUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedPacks to update
     */
    where?: ArchivedPackWhereInput
    /**
     * Limit how many ArchivedPacks to update.
     */
    limit?: number
  }

  /**
   * ArchivedPack upsert
   */
  export type ArchivedPackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * The filter to search for the ArchivedPack to update in case it exists.
     */
    where: ArchivedPackWhereUniqueInput
    /**
     * In case the ArchivedPack found by the `where` argument doesn't exist, create a new ArchivedPack with this data.
     */
    create: XOR<ArchivedPackCreateInput, ArchivedPackUncheckedCreateInput>
    /**
     * In case the ArchivedPack was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchivedPackUpdateInput, ArchivedPackUncheckedUpdateInput>
  }

  /**
   * ArchivedPack delete
   */
  export type ArchivedPackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
    /**
     * Filter which ArchivedPack to delete.
     */
    where: ArchivedPackWhereUniqueInput
  }

  /**
   * ArchivedPack deleteMany
   */
  export type ArchivedPackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedPacks to delete
     */
    where?: ArchivedPackWhereInput
    /**
     * Limit how many ArchivedPacks to delete.
     */
    limit?: number
  }

  /**
   * ArchivedPack without action
   */
  export type ArchivedPackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedPack
     */
    select?: ArchivedPackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArchivedPack
     */
    omit?: ArchivedPackOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PassengerScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    gender: 'gender',
    phone: 'phone',
    nationalCode: 'nationalCode',
    travelDate: 'travelDate',
    returnDate: 'returnDate',
    birthDate: 'birthDate',
    travelType: 'travelType',
    leaderName: 'leaderName',
    leaderPhone: 'leaderPhone',
    createdById: 'createdById',
    packId: 'packId',
    createdAt: 'createdAt'
  };

  export type PassengerScalarFieldEnum = (typeof PassengerScalarFieldEnum)[keyof typeof PassengerScalarFieldEnum]


  export const PackScalarFieldEnum: {
    id: 'id',
    travelDate: 'travelDate',
    type: 'type',
    repository: 'repository',
    status: 'status',
    busAssignmentId: 'busAssignmentId',
    finalConfirmationId: 'finalConfirmationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PackScalarFieldEnum = (typeof PackScalarFieldEnum)[keyof typeof PackScalarFieldEnum]


  export const BusAssignmentScalarFieldEnum: {
    id: 'id',
    company: 'company',
    plate: 'plate',
    driver: 'driver',
    driverPhone: 'driverPhone',
    packId: 'packId',
    travelDate: 'travelDate',
    type: 'type'
  };

  export type BusAssignmentScalarFieldEnum = (typeof BusAssignmentScalarFieldEnum)[keyof typeof BusAssignmentScalarFieldEnum]


  export const FinalConfirmationScalarFieldEnum: {
    id: 'id',
    packId: 'packId',
    busAssignmentId: 'busAssignmentId',
    travelDate: 'travelDate',
    type: 'type',
    company: 'company',
    plate: 'plate',
    driver: 'driver',
    driverPhone: 'driverPhone',
    confirmationDate: 'confirmationDate'
  };

  export type FinalConfirmationScalarFieldEnum = (typeof FinalConfirmationScalarFieldEnum)[keyof typeof FinalConfirmationScalarFieldEnum]


  export const SmsHistoryScalarFieldEnum: {
    id: 'id',
    packId: 'packId',
    recipientPhone: 'recipientPhone',
    recipientType: 'recipientType',
    text: 'text',
    sentAt: 'sentAt',
    status: 'status',
    error: 'error',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SmsHistoryScalarFieldEnum = (typeof SmsHistoryScalarFieldEnum)[keyof typeof SmsHistoryScalarFieldEnum]


  export const PackHistoryScalarFieldEnum: {
    id: 'id',
    packId: 'packId',
    status: 'status',
    changedAt: 'changedAt'
  };

  export type PackHistoryScalarFieldEnum = (typeof PackHistoryScalarFieldEnum)[keyof typeof PackHistoryScalarFieldEnum]


  export const ArchivedPackScalarFieldEnum: {
    id: 'id',
    packId: 'packId',
    travelDate: 'travelDate',
    type: 'type',
    repository: 'repository',
    status: 'status',
    passengers: 'passengers',
    busAssignment: 'busAssignment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    archivedAt: 'archivedAt'
  };

  export type ArchivedPackScalarFieldEnum = (typeof ArchivedPackScalarFieldEnum)[keyof typeof ArchivedPackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PackType'
   */
  export type EnumPackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackType'>
    


  /**
   * Reference to a field of type 'PackType[]'
   */
  export type ListEnumPackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackType[]'>
    


  /**
   * Reference to a field of type 'PackStatus'
   */
  export type EnumPackStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackStatus'>
    


  /**
   * Reference to a field of type 'PackStatus[]'
   */
  export type ListEnumPackStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    passengers?: PassengerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    passengers?: PassengerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    passengers?: PassengerListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PassengerWhereInput = {
    AND?: PassengerWhereInput | PassengerWhereInput[]
    OR?: PassengerWhereInput[]
    NOT?: PassengerWhereInput | PassengerWhereInput[]
    id?: IntFilter<"Passenger"> | number
    firstName?: StringNullableFilter<"Passenger"> | string | null
    lastName?: StringNullableFilter<"Passenger"> | string | null
    gender?: StringFilter<"Passenger"> | string
    phone?: StringFilter<"Passenger"> | string
    nationalCode?: StringFilter<"Passenger"> | string
    travelDate?: StringFilter<"Passenger"> | string
    returnDate?: StringNullableFilter<"Passenger"> | string | null
    birthDate?: StringFilter<"Passenger"> | string
    travelType?: StringFilter<"Passenger"> | string
    leaderName?: StringNullableFilter<"Passenger"> | string | null
    leaderPhone?: StringNullableFilter<"Passenger"> | string | null
    createdById?: IntFilter<"Passenger"> | number
    packId?: IntNullableFilter<"Passenger"> | number | null
    createdAt?: DateTimeFilter<"Passenger"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    pack?: XOR<PackNullableScalarRelationFilter, PackWhereInput> | null
    busAssignment?: BusAssignmentListRelationFilter
  }

  export type PassengerOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    gender?: SortOrder
    phone?: SortOrder
    nationalCode?: SortOrder
    travelDate?: SortOrder
    returnDate?: SortOrderInput | SortOrder
    birthDate?: SortOrder
    travelType?: SortOrder
    leaderName?: SortOrderInput | SortOrder
    leaderPhone?: SortOrderInput | SortOrder
    createdById?: SortOrder
    packId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    pack?: PackOrderByWithRelationInput
    busAssignment?: BusAssignmentOrderByRelationAggregateInput
  }

  export type PassengerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nationalCode?: string
    AND?: PassengerWhereInput | PassengerWhereInput[]
    OR?: PassengerWhereInput[]
    NOT?: PassengerWhereInput | PassengerWhereInput[]
    firstName?: StringNullableFilter<"Passenger"> | string | null
    lastName?: StringNullableFilter<"Passenger"> | string | null
    gender?: StringFilter<"Passenger"> | string
    phone?: StringFilter<"Passenger"> | string
    travelDate?: StringFilter<"Passenger"> | string
    returnDate?: StringNullableFilter<"Passenger"> | string | null
    birthDate?: StringFilter<"Passenger"> | string
    travelType?: StringFilter<"Passenger"> | string
    leaderName?: StringNullableFilter<"Passenger"> | string | null
    leaderPhone?: StringNullableFilter<"Passenger"> | string | null
    createdById?: IntFilter<"Passenger"> | number
    packId?: IntNullableFilter<"Passenger"> | number | null
    createdAt?: DateTimeFilter<"Passenger"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    pack?: XOR<PackNullableScalarRelationFilter, PackWhereInput> | null
    busAssignment?: BusAssignmentListRelationFilter
  }, "id" | "nationalCode">

  export type PassengerOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    gender?: SortOrder
    phone?: SortOrder
    nationalCode?: SortOrder
    travelDate?: SortOrder
    returnDate?: SortOrderInput | SortOrder
    birthDate?: SortOrder
    travelType?: SortOrder
    leaderName?: SortOrderInput | SortOrder
    leaderPhone?: SortOrderInput | SortOrder
    createdById?: SortOrder
    packId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PassengerCountOrderByAggregateInput
    _avg?: PassengerAvgOrderByAggregateInput
    _max?: PassengerMaxOrderByAggregateInput
    _min?: PassengerMinOrderByAggregateInput
    _sum?: PassengerSumOrderByAggregateInput
  }

  export type PassengerScalarWhereWithAggregatesInput = {
    AND?: PassengerScalarWhereWithAggregatesInput | PassengerScalarWhereWithAggregatesInput[]
    OR?: PassengerScalarWhereWithAggregatesInput[]
    NOT?: PassengerScalarWhereWithAggregatesInput | PassengerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Passenger"> | number
    firstName?: StringNullableWithAggregatesFilter<"Passenger"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Passenger"> | string | null
    gender?: StringWithAggregatesFilter<"Passenger"> | string
    phone?: StringWithAggregatesFilter<"Passenger"> | string
    nationalCode?: StringWithAggregatesFilter<"Passenger"> | string
    travelDate?: StringWithAggregatesFilter<"Passenger"> | string
    returnDate?: StringNullableWithAggregatesFilter<"Passenger"> | string | null
    birthDate?: StringWithAggregatesFilter<"Passenger"> | string
    travelType?: StringWithAggregatesFilter<"Passenger"> | string
    leaderName?: StringNullableWithAggregatesFilter<"Passenger"> | string | null
    leaderPhone?: StringNullableWithAggregatesFilter<"Passenger"> | string | null
    createdById?: IntWithAggregatesFilter<"Passenger"> | number
    packId?: IntNullableWithAggregatesFilter<"Passenger"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Passenger"> | Date | string
  }

  export type PackWhereInput = {
    AND?: PackWhereInput | PackWhereInput[]
    OR?: PackWhereInput[]
    NOT?: PackWhereInput | PackWhereInput[]
    id?: IntFilter<"Pack"> | number
    travelDate?: DateTimeFilter<"Pack"> | Date | string
    type?: EnumPackTypeFilter<"Pack"> | $Enums.PackType
    repository?: IntFilter<"Pack"> | number
    status?: EnumPackStatusFilter<"Pack"> | $Enums.PackStatus
    busAssignmentId?: IntNullableFilter<"Pack"> | number | null
    finalConfirmationId?: IntNullableFilter<"Pack"> | number | null
    createdAt?: DateTimeFilter<"Pack"> | Date | string
    updatedAt?: DateTimeFilter<"Pack"> | Date | string
    passengers?: PassengerListRelationFilter
    busAssignment?: XOR<BusAssignmentNullableScalarRelationFilter, BusAssignmentWhereInput> | null
    finalConfirmation?: XOR<FinalConfirmationNullableScalarRelationFilter, FinalConfirmationWhereInput> | null
    history?: PackHistoryListRelationFilter
    smsHistory?: SmsHistoryListRelationFilter
  }

  export type PackOrderByWithRelationInput = {
    id?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    busAssignmentId?: SortOrderInput | SortOrder
    finalConfirmationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passengers?: PassengerOrderByRelationAggregateInput
    busAssignment?: BusAssignmentOrderByWithRelationInput
    finalConfirmation?: FinalConfirmationOrderByWithRelationInput
    history?: PackHistoryOrderByRelationAggregateInput
    smsHistory?: SmsHistoryOrderByRelationAggregateInput
  }

  export type PackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    busAssignmentId?: number
    finalConfirmationId?: number
    AND?: PackWhereInput | PackWhereInput[]
    OR?: PackWhereInput[]
    NOT?: PackWhereInput | PackWhereInput[]
    travelDate?: DateTimeFilter<"Pack"> | Date | string
    type?: EnumPackTypeFilter<"Pack"> | $Enums.PackType
    repository?: IntFilter<"Pack"> | number
    status?: EnumPackStatusFilter<"Pack"> | $Enums.PackStatus
    createdAt?: DateTimeFilter<"Pack"> | Date | string
    updatedAt?: DateTimeFilter<"Pack"> | Date | string
    passengers?: PassengerListRelationFilter
    busAssignment?: XOR<BusAssignmentNullableScalarRelationFilter, BusAssignmentWhereInput> | null
    finalConfirmation?: XOR<FinalConfirmationNullableScalarRelationFilter, FinalConfirmationWhereInput> | null
    history?: PackHistoryListRelationFilter
    smsHistory?: SmsHistoryListRelationFilter
  }, "id" | "busAssignmentId" | "finalConfirmationId">

  export type PackOrderByWithAggregationInput = {
    id?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    busAssignmentId?: SortOrderInput | SortOrder
    finalConfirmationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PackCountOrderByAggregateInput
    _avg?: PackAvgOrderByAggregateInput
    _max?: PackMaxOrderByAggregateInput
    _min?: PackMinOrderByAggregateInput
    _sum?: PackSumOrderByAggregateInput
  }

  export type PackScalarWhereWithAggregatesInput = {
    AND?: PackScalarWhereWithAggregatesInput | PackScalarWhereWithAggregatesInput[]
    OR?: PackScalarWhereWithAggregatesInput[]
    NOT?: PackScalarWhereWithAggregatesInput | PackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pack"> | number
    travelDate?: DateTimeWithAggregatesFilter<"Pack"> | Date | string
    type?: EnumPackTypeWithAggregatesFilter<"Pack"> | $Enums.PackType
    repository?: IntWithAggregatesFilter<"Pack"> | number
    status?: EnumPackStatusWithAggregatesFilter<"Pack"> | $Enums.PackStatus
    busAssignmentId?: IntNullableWithAggregatesFilter<"Pack"> | number | null
    finalConfirmationId?: IntNullableWithAggregatesFilter<"Pack"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Pack"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pack"> | Date | string
  }

  export type BusAssignmentWhereInput = {
    AND?: BusAssignmentWhereInput | BusAssignmentWhereInput[]
    OR?: BusAssignmentWhereInput[]
    NOT?: BusAssignmentWhereInput | BusAssignmentWhereInput[]
    id?: IntFilter<"BusAssignment"> | number
    company?: StringFilter<"BusAssignment"> | string
    plate?: StringFilter<"BusAssignment"> | string
    driver?: StringFilter<"BusAssignment"> | string
    driverPhone?: StringFilter<"BusAssignment"> | string
    packId?: IntFilter<"BusAssignment"> | number
    travelDate?: DateTimeFilter<"BusAssignment"> | Date | string
    type?: EnumPackTypeFilter<"BusAssignment"> | $Enums.PackType
    pack?: XOR<PackNullableScalarRelationFilter, PackWhereInput> | null
    passengers?: PassengerListRelationFilter
    finalConfirmation?: XOR<FinalConfirmationNullableScalarRelationFilter, FinalConfirmationWhereInput> | null
  }

  export type BusAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    pack?: PackOrderByWithRelationInput
    passengers?: PassengerOrderByRelationAggregateInput
    finalConfirmation?: FinalConfirmationOrderByWithRelationInput
  }

  export type BusAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    packId?: number
    AND?: BusAssignmentWhereInput | BusAssignmentWhereInput[]
    OR?: BusAssignmentWhereInput[]
    NOT?: BusAssignmentWhereInput | BusAssignmentWhereInput[]
    company?: StringFilter<"BusAssignment"> | string
    plate?: StringFilter<"BusAssignment"> | string
    driver?: StringFilter<"BusAssignment"> | string
    driverPhone?: StringFilter<"BusAssignment"> | string
    travelDate?: DateTimeFilter<"BusAssignment"> | Date | string
    type?: EnumPackTypeFilter<"BusAssignment"> | $Enums.PackType
    pack?: XOR<PackNullableScalarRelationFilter, PackWhereInput> | null
    passengers?: PassengerListRelationFilter
    finalConfirmation?: XOR<FinalConfirmationNullableScalarRelationFilter, FinalConfirmationWhereInput> | null
  }, "id" | "packId">

  export type BusAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    _count?: BusAssignmentCountOrderByAggregateInput
    _avg?: BusAssignmentAvgOrderByAggregateInput
    _max?: BusAssignmentMaxOrderByAggregateInput
    _min?: BusAssignmentMinOrderByAggregateInput
    _sum?: BusAssignmentSumOrderByAggregateInput
  }

  export type BusAssignmentScalarWhereWithAggregatesInput = {
    AND?: BusAssignmentScalarWhereWithAggregatesInput | BusAssignmentScalarWhereWithAggregatesInput[]
    OR?: BusAssignmentScalarWhereWithAggregatesInput[]
    NOT?: BusAssignmentScalarWhereWithAggregatesInput | BusAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BusAssignment"> | number
    company?: StringWithAggregatesFilter<"BusAssignment"> | string
    plate?: StringWithAggregatesFilter<"BusAssignment"> | string
    driver?: StringWithAggregatesFilter<"BusAssignment"> | string
    driverPhone?: StringWithAggregatesFilter<"BusAssignment"> | string
    packId?: IntWithAggregatesFilter<"BusAssignment"> | number
    travelDate?: DateTimeWithAggregatesFilter<"BusAssignment"> | Date | string
    type?: EnumPackTypeWithAggregatesFilter<"BusAssignment"> | $Enums.PackType
  }

  export type FinalConfirmationWhereInput = {
    AND?: FinalConfirmationWhereInput | FinalConfirmationWhereInput[]
    OR?: FinalConfirmationWhereInput[]
    NOT?: FinalConfirmationWhereInput | FinalConfirmationWhereInput[]
    id?: IntFilter<"FinalConfirmation"> | number
    packId?: IntFilter<"FinalConfirmation"> | number
    busAssignmentId?: IntFilter<"FinalConfirmation"> | number
    travelDate?: DateTimeFilter<"FinalConfirmation"> | Date | string
    type?: EnumPackTypeFilter<"FinalConfirmation"> | $Enums.PackType
    company?: StringFilter<"FinalConfirmation"> | string
    plate?: StringFilter<"FinalConfirmation"> | string
    driver?: StringFilter<"FinalConfirmation"> | string
    driverPhone?: StringFilter<"FinalConfirmation"> | string
    confirmationDate?: DateTimeFilter<"FinalConfirmation"> | Date | string
    pack?: XOR<PackScalarRelationFilter, PackWhereInput>
    busAssignment?: XOR<BusAssignmentScalarRelationFilter, BusAssignmentWhereInput>
  }

  export type FinalConfirmationOrderByWithRelationInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    confirmationDate?: SortOrder
    pack?: PackOrderByWithRelationInput
    busAssignment?: BusAssignmentOrderByWithRelationInput
  }

  export type FinalConfirmationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    packId?: number
    busAssignmentId?: number
    AND?: FinalConfirmationWhereInput | FinalConfirmationWhereInput[]
    OR?: FinalConfirmationWhereInput[]
    NOT?: FinalConfirmationWhereInput | FinalConfirmationWhereInput[]
    travelDate?: DateTimeFilter<"FinalConfirmation"> | Date | string
    type?: EnumPackTypeFilter<"FinalConfirmation"> | $Enums.PackType
    company?: StringFilter<"FinalConfirmation"> | string
    plate?: StringFilter<"FinalConfirmation"> | string
    driver?: StringFilter<"FinalConfirmation"> | string
    driverPhone?: StringFilter<"FinalConfirmation"> | string
    confirmationDate?: DateTimeFilter<"FinalConfirmation"> | Date | string
    pack?: XOR<PackScalarRelationFilter, PackWhereInput>
    busAssignment?: XOR<BusAssignmentScalarRelationFilter, BusAssignmentWhereInput>
  }, "id" | "packId" | "busAssignmentId">

  export type FinalConfirmationOrderByWithAggregationInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    confirmationDate?: SortOrder
    _count?: FinalConfirmationCountOrderByAggregateInput
    _avg?: FinalConfirmationAvgOrderByAggregateInput
    _max?: FinalConfirmationMaxOrderByAggregateInput
    _min?: FinalConfirmationMinOrderByAggregateInput
    _sum?: FinalConfirmationSumOrderByAggregateInput
  }

  export type FinalConfirmationScalarWhereWithAggregatesInput = {
    AND?: FinalConfirmationScalarWhereWithAggregatesInput | FinalConfirmationScalarWhereWithAggregatesInput[]
    OR?: FinalConfirmationScalarWhereWithAggregatesInput[]
    NOT?: FinalConfirmationScalarWhereWithAggregatesInput | FinalConfirmationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FinalConfirmation"> | number
    packId?: IntWithAggregatesFilter<"FinalConfirmation"> | number
    busAssignmentId?: IntWithAggregatesFilter<"FinalConfirmation"> | number
    travelDate?: DateTimeWithAggregatesFilter<"FinalConfirmation"> | Date | string
    type?: EnumPackTypeWithAggregatesFilter<"FinalConfirmation"> | $Enums.PackType
    company?: StringWithAggregatesFilter<"FinalConfirmation"> | string
    plate?: StringWithAggregatesFilter<"FinalConfirmation"> | string
    driver?: StringWithAggregatesFilter<"FinalConfirmation"> | string
    driverPhone?: StringWithAggregatesFilter<"FinalConfirmation"> | string
    confirmationDate?: DateTimeWithAggregatesFilter<"FinalConfirmation"> | Date | string
  }

  export type SmsHistoryWhereInput = {
    AND?: SmsHistoryWhereInput | SmsHistoryWhereInput[]
    OR?: SmsHistoryWhereInput[]
    NOT?: SmsHistoryWhereInput | SmsHistoryWhereInput[]
    id?: IntFilter<"SmsHistory"> | number
    packId?: IntFilter<"SmsHistory"> | number
    recipientPhone?: StringFilter<"SmsHistory"> | string
    recipientType?: StringFilter<"SmsHistory"> | string
    text?: StringFilter<"SmsHistory"> | string
    sentAt?: DateTimeFilter<"SmsHistory"> | Date | string
    status?: StringFilter<"SmsHistory"> | string
    error?: StringNullableFilter<"SmsHistory"> | string | null
    createdBy?: IntFilter<"SmsHistory"> | number
    createdAt?: DateTimeFilter<"SmsHistory"> | Date | string
    updatedAt?: DateTimeFilter<"SmsHistory"> | Date | string
    pack?: XOR<PackScalarRelationFilter, PackWhereInput>
  }

  export type SmsHistoryOrderByWithRelationInput = {
    id?: SortOrder
    packId?: SortOrder
    recipientPhone?: SortOrder
    recipientType?: SortOrder
    text?: SortOrder
    sentAt?: SortOrder
    status?: SortOrder
    error?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pack?: PackOrderByWithRelationInput
  }

  export type SmsHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SmsHistoryWhereInput | SmsHistoryWhereInput[]
    OR?: SmsHistoryWhereInput[]
    NOT?: SmsHistoryWhereInput | SmsHistoryWhereInput[]
    packId?: IntFilter<"SmsHistory"> | number
    recipientPhone?: StringFilter<"SmsHistory"> | string
    recipientType?: StringFilter<"SmsHistory"> | string
    text?: StringFilter<"SmsHistory"> | string
    sentAt?: DateTimeFilter<"SmsHistory"> | Date | string
    status?: StringFilter<"SmsHistory"> | string
    error?: StringNullableFilter<"SmsHistory"> | string | null
    createdBy?: IntFilter<"SmsHistory"> | number
    createdAt?: DateTimeFilter<"SmsHistory"> | Date | string
    updatedAt?: DateTimeFilter<"SmsHistory"> | Date | string
    pack?: XOR<PackScalarRelationFilter, PackWhereInput>
  }, "id">

  export type SmsHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    packId?: SortOrder
    recipientPhone?: SortOrder
    recipientType?: SortOrder
    text?: SortOrder
    sentAt?: SortOrder
    status?: SortOrder
    error?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SmsHistoryCountOrderByAggregateInput
    _avg?: SmsHistoryAvgOrderByAggregateInput
    _max?: SmsHistoryMaxOrderByAggregateInput
    _min?: SmsHistoryMinOrderByAggregateInput
    _sum?: SmsHistorySumOrderByAggregateInput
  }

  export type SmsHistoryScalarWhereWithAggregatesInput = {
    AND?: SmsHistoryScalarWhereWithAggregatesInput | SmsHistoryScalarWhereWithAggregatesInput[]
    OR?: SmsHistoryScalarWhereWithAggregatesInput[]
    NOT?: SmsHistoryScalarWhereWithAggregatesInput | SmsHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SmsHistory"> | number
    packId?: IntWithAggregatesFilter<"SmsHistory"> | number
    recipientPhone?: StringWithAggregatesFilter<"SmsHistory"> | string
    recipientType?: StringWithAggregatesFilter<"SmsHistory"> | string
    text?: StringWithAggregatesFilter<"SmsHistory"> | string
    sentAt?: DateTimeWithAggregatesFilter<"SmsHistory"> | Date | string
    status?: StringWithAggregatesFilter<"SmsHistory"> | string
    error?: StringNullableWithAggregatesFilter<"SmsHistory"> | string | null
    createdBy?: IntWithAggregatesFilter<"SmsHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SmsHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SmsHistory"> | Date | string
  }

  export type PackHistoryWhereInput = {
    AND?: PackHistoryWhereInput | PackHistoryWhereInput[]
    OR?: PackHistoryWhereInput[]
    NOT?: PackHistoryWhereInput | PackHistoryWhereInput[]
    id?: IntFilter<"PackHistory"> | number
    packId?: IntFilter<"PackHistory"> | number
    status?: StringFilter<"PackHistory"> | string
    changedAt?: DateTimeFilter<"PackHistory"> | Date | string
    pack?: XOR<PackScalarRelationFilter, PackWhereInput>
  }

  export type PackHistoryOrderByWithRelationInput = {
    id?: SortOrder
    packId?: SortOrder
    status?: SortOrder
    changedAt?: SortOrder
    pack?: PackOrderByWithRelationInput
  }

  export type PackHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackHistoryWhereInput | PackHistoryWhereInput[]
    OR?: PackHistoryWhereInput[]
    NOT?: PackHistoryWhereInput | PackHistoryWhereInput[]
    packId?: IntFilter<"PackHistory"> | number
    status?: StringFilter<"PackHistory"> | string
    changedAt?: DateTimeFilter<"PackHistory"> | Date | string
    pack?: XOR<PackScalarRelationFilter, PackWhereInput>
  }, "id">

  export type PackHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    packId?: SortOrder
    status?: SortOrder
    changedAt?: SortOrder
    _count?: PackHistoryCountOrderByAggregateInput
    _avg?: PackHistoryAvgOrderByAggregateInput
    _max?: PackHistoryMaxOrderByAggregateInput
    _min?: PackHistoryMinOrderByAggregateInput
    _sum?: PackHistorySumOrderByAggregateInput
  }

  export type PackHistoryScalarWhereWithAggregatesInput = {
    AND?: PackHistoryScalarWhereWithAggregatesInput | PackHistoryScalarWhereWithAggregatesInput[]
    OR?: PackHistoryScalarWhereWithAggregatesInput[]
    NOT?: PackHistoryScalarWhereWithAggregatesInput | PackHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PackHistory"> | number
    packId?: IntWithAggregatesFilter<"PackHistory"> | number
    status?: StringWithAggregatesFilter<"PackHistory"> | string
    changedAt?: DateTimeWithAggregatesFilter<"PackHistory"> | Date | string
  }

  export type ArchivedPackWhereInput = {
    AND?: ArchivedPackWhereInput | ArchivedPackWhereInput[]
    OR?: ArchivedPackWhereInput[]
    NOT?: ArchivedPackWhereInput | ArchivedPackWhereInput[]
    id?: IntFilter<"ArchivedPack"> | number
    packId?: IntFilter<"ArchivedPack"> | number
    travelDate?: DateTimeFilter<"ArchivedPack"> | Date | string
    type?: EnumPackTypeFilter<"ArchivedPack"> | $Enums.PackType
    repository?: IntFilter<"ArchivedPack"> | number
    status?: EnumPackStatusFilter<"ArchivedPack"> | $Enums.PackStatus
    passengers?: JsonFilter<"ArchivedPack">
    busAssignment?: JsonNullableFilter<"ArchivedPack">
    createdAt?: DateTimeFilter<"ArchivedPack"> | Date | string
    updatedAt?: DateTimeFilter<"ArchivedPack"> | Date | string
    archivedAt?: DateTimeFilter<"ArchivedPack"> | Date | string
  }

  export type ArchivedPackOrderByWithRelationInput = {
    id?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    passengers?: SortOrder
    busAssignment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type ArchivedPackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    packId?: number
    AND?: ArchivedPackWhereInput | ArchivedPackWhereInput[]
    OR?: ArchivedPackWhereInput[]
    NOT?: ArchivedPackWhereInput | ArchivedPackWhereInput[]
    travelDate?: DateTimeFilter<"ArchivedPack"> | Date | string
    type?: EnumPackTypeFilter<"ArchivedPack"> | $Enums.PackType
    repository?: IntFilter<"ArchivedPack"> | number
    status?: EnumPackStatusFilter<"ArchivedPack"> | $Enums.PackStatus
    passengers?: JsonFilter<"ArchivedPack">
    busAssignment?: JsonNullableFilter<"ArchivedPack">
    createdAt?: DateTimeFilter<"ArchivedPack"> | Date | string
    updatedAt?: DateTimeFilter<"ArchivedPack"> | Date | string
    archivedAt?: DateTimeFilter<"ArchivedPack"> | Date | string
  }, "id" | "packId">

  export type ArchivedPackOrderByWithAggregationInput = {
    id?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    passengers?: SortOrder
    busAssignment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
    _count?: ArchivedPackCountOrderByAggregateInput
    _avg?: ArchivedPackAvgOrderByAggregateInput
    _max?: ArchivedPackMaxOrderByAggregateInput
    _min?: ArchivedPackMinOrderByAggregateInput
    _sum?: ArchivedPackSumOrderByAggregateInput
  }

  export type ArchivedPackScalarWhereWithAggregatesInput = {
    AND?: ArchivedPackScalarWhereWithAggregatesInput | ArchivedPackScalarWhereWithAggregatesInput[]
    OR?: ArchivedPackScalarWhereWithAggregatesInput[]
    NOT?: ArchivedPackScalarWhereWithAggregatesInput | ArchivedPackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArchivedPack"> | number
    packId?: IntWithAggregatesFilter<"ArchivedPack"> | number
    travelDate?: DateTimeWithAggregatesFilter<"ArchivedPack"> | Date | string
    type?: EnumPackTypeWithAggregatesFilter<"ArchivedPack"> | $Enums.PackType
    repository?: IntWithAggregatesFilter<"ArchivedPack"> | number
    status?: EnumPackStatusWithAggregatesFilter<"ArchivedPack"> | $Enums.PackStatus
    passengers?: JsonWithAggregatesFilter<"ArchivedPack">
    busAssignment?: JsonNullableWithAggregatesFilter<"ArchivedPack">
    createdAt?: DateTimeWithAggregatesFilter<"ArchivedPack"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ArchivedPack"> | Date | string
    archivedAt?: DateTimeWithAggregatesFilter<"ArchivedPack"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    password: string
    role: string
    createdAt?: Date | string
    passengers?: PassengerCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    role: string
    createdAt?: Date | string
    passengers?: PassengerUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
    role: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassengerCreateInput = {
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPassengersInput
    pack?: PackCreateNestedOneWithoutPassengersInput
    busAssignment?: BusAssignmentCreateNestedManyWithoutPassengersInput
  }

  export type PassengerUncheckedCreateInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdById: number
    packId?: number | null
    createdAt?: Date | string
    busAssignment?: BusAssignmentUncheckedCreateNestedManyWithoutPassengersInput
  }

  export type PassengerUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPassengersNestedInput
    pack?: PackUpdateOneWithoutPassengersNestedInput
    busAssignment?: BusAssignmentUpdateManyWithoutPassengersNestedInput
  }

  export type PassengerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    packId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    busAssignment?: BusAssignmentUncheckedUpdateManyWithoutPassengersNestedInput
  }

  export type PassengerCreateManyInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdById: number
    packId?: number | null
    createdAt?: Date | string
  }

  export type PassengerUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassengerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    packId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackCreateInput = {
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerCreateNestedManyWithoutPackInput
    busAssignment?: BusAssignmentCreateNestedOneWithoutPackInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutPackInput
    history?: PackHistoryCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryCreateNestedManyWithoutPackInput
  }

  export type PackUncheckedCreateInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    busAssignmentId?: number | null
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerUncheckedCreateNestedManyWithoutPackInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutPackInput
    history?: PackHistoryUncheckedCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryUncheckedCreateNestedManyWithoutPackInput
  }

  export type PackUpdateInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUpdateManyWithoutPackNestedInput
    busAssignment?: BusAssignmentUpdateOneWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutPackNestedInput
    history?: PackHistoryUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUpdateManyWithoutPackNestedInput
  }

  export type PackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    busAssignmentId?: NullableIntFieldUpdateOperationsInput | number | null
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUncheckedUpdateManyWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutPackNestedInput
    history?: PackHistoryUncheckedUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUncheckedUpdateManyWithoutPackNestedInput
  }

  export type PackCreateManyInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    busAssignmentId?: number | null
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackUpdateManyMutationInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    busAssignmentId?: NullableIntFieldUpdateOperationsInput | number | null
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusAssignmentCreateInput = {
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    pack?: PackCreateNestedOneWithoutBusAssignmentInput
    passengers?: PassengerCreateNestedManyWithoutBusAssignmentInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutBusAssignmentInput
  }

  export type BusAssignmentUncheckedCreateInput = {
    id?: number
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    pack?: PackUncheckedCreateNestedOneWithoutBusAssignmentInput
    passengers?: PassengerUncheckedCreateNestedManyWithoutBusAssignmentInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutBusAssignmentInput
  }

  export type BusAssignmentUpdateInput = {
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    pack?: PackUpdateOneWithoutBusAssignmentNestedInput
    passengers?: PassengerUpdateManyWithoutBusAssignmentNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutBusAssignmentNestedInput
  }

  export type BusAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    pack?: PackUncheckedUpdateOneWithoutBusAssignmentNestedInput
    passengers?: PassengerUncheckedUpdateManyWithoutBusAssignmentNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutBusAssignmentNestedInput
  }

  export type BusAssignmentCreateManyInput = {
    id?: number
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
  }

  export type BusAssignmentUpdateManyMutationInput = {
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
  }

  export type BusAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
  }

  export type FinalConfirmationCreateInput = {
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
    pack: PackCreateNestedOneWithoutFinalConfirmationInput
    busAssignment: BusAssignmentCreateNestedOneWithoutFinalConfirmationInput
  }

  export type FinalConfirmationUncheckedCreateInput = {
    id?: number
    packId: number
    busAssignmentId: number
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
  }

  export type FinalConfirmationUpdateInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pack?: PackUpdateOneRequiredWithoutFinalConfirmationNestedInput
    busAssignment?: BusAssignmentUpdateOneRequiredWithoutFinalConfirmationNestedInput
  }

  export type FinalConfirmationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    busAssignmentId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinalConfirmationCreateManyInput = {
    id?: number
    packId: number
    busAssignmentId: number
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
  }

  export type FinalConfirmationUpdateManyMutationInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinalConfirmationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    busAssignmentId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmsHistoryCreateInput = {
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date | string
    status: string
    error?: string | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    pack: PackCreateNestedOneWithoutSmsHistoryInput
  }

  export type SmsHistoryUncheckedCreateInput = {
    id?: number
    packId: number
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date | string
    status: string
    error?: string | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SmsHistoryUpdateInput = {
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pack?: PackUpdateOneRequiredWithoutSmsHistoryNestedInput
  }

  export type SmsHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmsHistoryCreateManyInput = {
    id?: number
    packId: number
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date | string
    status: string
    error?: string | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SmsHistoryUpdateManyMutationInput = {
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmsHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryCreateInput = {
    status: string
    changedAt?: Date | string
    pack: PackCreateNestedOneWithoutHistoryInput
  }

  export type PackHistoryUncheckedCreateInput = {
    id?: number
    packId: number
    status: string
    changedAt?: Date | string
  }

  export type PackHistoryUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pack?: PackUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type PackHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryCreateManyInput = {
    id?: number
    packId: number
    status: string
    changedAt?: Date | string
  }

  export type PackHistoryUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedPackCreateInput = {
    packId: number
    travelDate: Date | string
    type: $Enums.PackType
    repository: number
    status: $Enums.PackStatus
    passengers: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt: Date | string
    updatedAt: Date | string
    archivedAt?: Date | string
  }

  export type ArchivedPackUncheckedCreateInput = {
    id?: number
    packId: number
    travelDate: Date | string
    type: $Enums.PackType
    repository: number
    status: $Enums.PackStatus
    passengers: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt: Date | string
    updatedAt: Date | string
    archivedAt?: Date | string
  }

  export type ArchivedPackUpdateInput = {
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    passengers?: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedPackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    passengers?: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedPackCreateManyInput = {
    id?: number
    packId: number
    travelDate: Date | string
    type: $Enums.PackType
    repository: number
    status: $Enums.PackStatus
    passengers: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt: Date | string
    updatedAt: Date | string
    archivedAt?: Date | string
  }

  export type ArchivedPackUpdateManyMutationInput = {
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    passengers?: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedPackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    passengers?: JsonNullValueInput | InputJsonValue
    busAssignment?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PassengerListRelationFilter = {
    every?: PassengerWhereInput
    some?: PassengerWhereInput
    none?: PassengerWhereInput
  }

  export type PassengerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PackNullableScalarRelationFilter = {
    is?: PackWhereInput | null
    isNot?: PackWhereInput | null
  }

  export type BusAssignmentListRelationFilter = {
    every?: BusAssignmentWhereInput
    some?: BusAssignmentWhereInput
    none?: BusAssignmentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BusAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassengerCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    nationalCode?: SortOrder
    travelDate?: SortOrder
    returnDate?: SortOrder
    birthDate?: SortOrder
    travelType?: SortOrder
    leaderName?: SortOrder
    leaderPhone?: SortOrder
    createdById?: SortOrder
    packId?: SortOrder
    createdAt?: SortOrder
  }

  export type PassengerAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    packId?: SortOrder
  }

  export type PassengerMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    nationalCode?: SortOrder
    travelDate?: SortOrder
    returnDate?: SortOrder
    birthDate?: SortOrder
    travelType?: SortOrder
    leaderName?: SortOrder
    leaderPhone?: SortOrder
    createdById?: SortOrder
    packId?: SortOrder
    createdAt?: SortOrder
  }

  export type PassengerMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    nationalCode?: SortOrder
    travelDate?: SortOrder
    returnDate?: SortOrder
    birthDate?: SortOrder
    travelType?: SortOrder
    leaderName?: SortOrder
    leaderPhone?: SortOrder
    createdById?: SortOrder
    packId?: SortOrder
    createdAt?: SortOrder
  }

  export type PassengerSumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    packId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumPackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeFilter<$PrismaModel> | $Enums.PackType
  }

  export type EnumPackStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PackStatus | EnumPackStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackStatusFilter<$PrismaModel> | $Enums.PackStatus
  }

  export type BusAssignmentNullableScalarRelationFilter = {
    is?: BusAssignmentWhereInput | null
    isNot?: BusAssignmentWhereInput | null
  }

  export type FinalConfirmationNullableScalarRelationFilter = {
    is?: FinalConfirmationWhereInput | null
    isNot?: FinalConfirmationWhereInput | null
  }

  export type PackHistoryListRelationFilter = {
    every?: PackHistoryWhereInput
    some?: PackHistoryWhereInput
    none?: PackHistoryWhereInput
  }

  export type SmsHistoryListRelationFilter = {
    every?: SmsHistoryWhereInput
    some?: SmsHistoryWhereInput
    none?: SmsHistoryWhereInput
  }

  export type PackHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SmsHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackCountOrderByAggregateInput = {
    id?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    busAssignmentId?: SortOrder
    finalConfirmationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackAvgOrderByAggregateInput = {
    id?: SortOrder
    repository?: SortOrder
    busAssignmentId?: SortOrder
    finalConfirmationId?: SortOrder
  }

  export type PackMaxOrderByAggregateInput = {
    id?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    busAssignmentId?: SortOrder
    finalConfirmationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackMinOrderByAggregateInput = {
    id?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    busAssignmentId?: SortOrder
    finalConfirmationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackSumOrderByAggregateInput = {
    id?: SortOrder
    repository?: SortOrder
    busAssignmentId?: SortOrder
    finalConfirmationId?: SortOrder
  }

  export type EnumPackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeWithAggregatesFilter<$PrismaModel> | $Enums.PackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackTypeFilter<$PrismaModel>
    _max?: NestedEnumPackTypeFilter<$PrismaModel>
  }

  export type EnumPackStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackStatus | EnumPackStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackStatusWithAggregatesFilter<$PrismaModel> | $Enums.PackStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackStatusFilter<$PrismaModel>
    _max?: NestedEnumPackStatusFilter<$PrismaModel>
  }

  export type BusAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
  }

  export type BusAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
  }

  export type BusAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
  }

  export type BusAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
  }

  export type BusAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
  }

  export type PackScalarRelationFilter = {
    is?: PackWhereInput
    isNot?: PackWhereInput
  }

  export type BusAssignmentScalarRelationFilter = {
    is?: BusAssignmentWhereInput
    isNot?: BusAssignmentWhereInput
  }

  export type FinalConfirmationCountOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    confirmationDate?: SortOrder
  }

  export type FinalConfirmationAvgOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
  }

  export type FinalConfirmationMaxOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    confirmationDate?: SortOrder
  }

  export type FinalConfirmationMinOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    company?: SortOrder
    plate?: SortOrder
    driver?: SortOrder
    driverPhone?: SortOrder
    confirmationDate?: SortOrder
  }

  export type FinalConfirmationSumOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    busAssignmentId?: SortOrder
  }

  export type SmsHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    recipientPhone?: SortOrder
    recipientType?: SortOrder
    text?: SortOrder
    sentAt?: SortOrder
    status?: SortOrder
    error?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SmsHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    createdBy?: SortOrder
  }

  export type SmsHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    recipientPhone?: SortOrder
    recipientType?: SortOrder
    text?: SortOrder
    sentAt?: SortOrder
    status?: SortOrder
    error?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SmsHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    recipientPhone?: SortOrder
    recipientType?: SortOrder
    text?: SortOrder
    sentAt?: SortOrder
    status?: SortOrder
    error?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SmsHistorySumOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    createdBy?: SortOrder
  }

  export type PackHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    status?: SortOrder
    changedAt?: SortOrder
  }

  export type PackHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
  }

  export type PackHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    status?: SortOrder
    changedAt?: SortOrder
  }

  export type PackHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    status?: SortOrder
    changedAt?: SortOrder
  }

  export type PackHistorySumOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ArchivedPackCountOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    passengers?: SortOrder
    busAssignment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type ArchivedPackAvgOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    repository?: SortOrder
  }

  export type ArchivedPackMaxOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type ArchivedPackMinOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    travelDate?: SortOrder
    type?: SortOrder
    repository?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
  }

  export type ArchivedPackSumOrderByAggregateInput = {
    id?: SortOrder
    packId?: SortOrder
    repository?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type PassengerCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PassengerCreateWithoutCreatedByInput, PassengerUncheckedCreateWithoutCreatedByInput> | PassengerCreateWithoutCreatedByInput[] | PassengerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutCreatedByInput | PassengerCreateOrConnectWithoutCreatedByInput[]
    createMany?: PassengerCreateManyCreatedByInputEnvelope
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
  }

  export type PassengerUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PassengerCreateWithoutCreatedByInput, PassengerUncheckedCreateWithoutCreatedByInput> | PassengerCreateWithoutCreatedByInput[] | PassengerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutCreatedByInput | PassengerCreateOrConnectWithoutCreatedByInput[]
    createMany?: PassengerCreateManyCreatedByInputEnvelope
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PassengerUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PassengerCreateWithoutCreatedByInput, PassengerUncheckedCreateWithoutCreatedByInput> | PassengerCreateWithoutCreatedByInput[] | PassengerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutCreatedByInput | PassengerCreateOrConnectWithoutCreatedByInput[]
    upsert?: PassengerUpsertWithWhereUniqueWithoutCreatedByInput | PassengerUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PassengerCreateManyCreatedByInputEnvelope
    set?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    disconnect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    delete?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    update?: PassengerUpdateWithWhereUniqueWithoutCreatedByInput | PassengerUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PassengerUpdateManyWithWhereWithoutCreatedByInput | PassengerUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PassengerUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PassengerCreateWithoutCreatedByInput, PassengerUncheckedCreateWithoutCreatedByInput> | PassengerCreateWithoutCreatedByInput[] | PassengerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutCreatedByInput | PassengerCreateOrConnectWithoutCreatedByInput[]
    upsert?: PassengerUpsertWithWhereUniqueWithoutCreatedByInput | PassengerUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PassengerCreateManyCreatedByInputEnvelope
    set?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    disconnect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    delete?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    update?: PassengerUpdateWithWhereUniqueWithoutCreatedByInput | PassengerUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PassengerUpdateManyWithWhereWithoutCreatedByInput | PassengerUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPassengersInput = {
    create?: XOR<UserCreateWithoutPassengersInput, UserUncheckedCreateWithoutPassengersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPassengersInput
    connect?: UserWhereUniqueInput
  }

  export type PackCreateNestedOneWithoutPassengersInput = {
    create?: XOR<PackCreateWithoutPassengersInput, PackUncheckedCreateWithoutPassengersInput>
    connectOrCreate?: PackCreateOrConnectWithoutPassengersInput
    connect?: PackWhereUniqueInput
  }

  export type BusAssignmentCreateNestedManyWithoutPassengersInput = {
    create?: XOR<BusAssignmentCreateWithoutPassengersInput, BusAssignmentUncheckedCreateWithoutPassengersInput> | BusAssignmentCreateWithoutPassengersInput[] | BusAssignmentUncheckedCreateWithoutPassengersInput[]
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutPassengersInput | BusAssignmentCreateOrConnectWithoutPassengersInput[]
    connect?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
  }

  export type BusAssignmentUncheckedCreateNestedManyWithoutPassengersInput = {
    create?: XOR<BusAssignmentCreateWithoutPassengersInput, BusAssignmentUncheckedCreateWithoutPassengersInput> | BusAssignmentCreateWithoutPassengersInput[] | BusAssignmentUncheckedCreateWithoutPassengersInput[]
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutPassengersInput | BusAssignmentCreateOrConnectWithoutPassengersInput[]
    connect?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutPassengersNestedInput = {
    create?: XOR<UserCreateWithoutPassengersInput, UserUncheckedCreateWithoutPassengersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPassengersInput
    upsert?: UserUpsertWithoutPassengersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPassengersInput, UserUpdateWithoutPassengersInput>, UserUncheckedUpdateWithoutPassengersInput>
  }

  export type PackUpdateOneWithoutPassengersNestedInput = {
    create?: XOR<PackCreateWithoutPassengersInput, PackUncheckedCreateWithoutPassengersInput>
    connectOrCreate?: PackCreateOrConnectWithoutPassengersInput
    upsert?: PackUpsertWithoutPassengersInput
    disconnect?: PackWhereInput | boolean
    delete?: PackWhereInput | boolean
    connect?: PackWhereUniqueInput
    update?: XOR<XOR<PackUpdateToOneWithWhereWithoutPassengersInput, PackUpdateWithoutPassengersInput>, PackUncheckedUpdateWithoutPassengersInput>
  }

  export type BusAssignmentUpdateManyWithoutPassengersNestedInput = {
    create?: XOR<BusAssignmentCreateWithoutPassengersInput, BusAssignmentUncheckedCreateWithoutPassengersInput> | BusAssignmentCreateWithoutPassengersInput[] | BusAssignmentUncheckedCreateWithoutPassengersInput[]
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutPassengersInput | BusAssignmentCreateOrConnectWithoutPassengersInput[]
    upsert?: BusAssignmentUpsertWithWhereUniqueWithoutPassengersInput | BusAssignmentUpsertWithWhereUniqueWithoutPassengersInput[]
    set?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    disconnect?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    delete?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    connect?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    update?: BusAssignmentUpdateWithWhereUniqueWithoutPassengersInput | BusAssignmentUpdateWithWhereUniqueWithoutPassengersInput[]
    updateMany?: BusAssignmentUpdateManyWithWhereWithoutPassengersInput | BusAssignmentUpdateManyWithWhereWithoutPassengersInput[]
    deleteMany?: BusAssignmentScalarWhereInput | BusAssignmentScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BusAssignmentUncheckedUpdateManyWithoutPassengersNestedInput = {
    create?: XOR<BusAssignmentCreateWithoutPassengersInput, BusAssignmentUncheckedCreateWithoutPassengersInput> | BusAssignmentCreateWithoutPassengersInput[] | BusAssignmentUncheckedCreateWithoutPassengersInput[]
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutPassengersInput | BusAssignmentCreateOrConnectWithoutPassengersInput[]
    upsert?: BusAssignmentUpsertWithWhereUniqueWithoutPassengersInput | BusAssignmentUpsertWithWhereUniqueWithoutPassengersInput[]
    set?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    disconnect?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    delete?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    connect?: BusAssignmentWhereUniqueInput | BusAssignmentWhereUniqueInput[]
    update?: BusAssignmentUpdateWithWhereUniqueWithoutPassengersInput | BusAssignmentUpdateWithWhereUniqueWithoutPassengersInput[]
    updateMany?: BusAssignmentUpdateManyWithWhereWithoutPassengersInput | BusAssignmentUpdateManyWithWhereWithoutPassengersInput[]
    deleteMany?: BusAssignmentScalarWhereInput | BusAssignmentScalarWhereInput[]
  }

  export type PassengerCreateNestedManyWithoutPackInput = {
    create?: XOR<PassengerCreateWithoutPackInput, PassengerUncheckedCreateWithoutPackInput> | PassengerCreateWithoutPackInput[] | PassengerUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutPackInput | PassengerCreateOrConnectWithoutPackInput[]
    createMany?: PassengerCreateManyPackInputEnvelope
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
  }

  export type BusAssignmentCreateNestedOneWithoutPackInput = {
    create?: XOR<BusAssignmentCreateWithoutPackInput, BusAssignmentUncheckedCreateWithoutPackInput>
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutPackInput
    connect?: BusAssignmentWhereUniqueInput
  }

  export type FinalConfirmationCreateNestedOneWithoutPackInput = {
    create?: XOR<FinalConfirmationCreateWithoutPackInput, FinalConfirmationUncheckedCreateWithoutPackInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutPackInput
    connect?: FinalConfirmationWhereUniqueInput
  }

  export type PackHistoryCreateNestedManyWithoutPackInput = {
    create?: XOR<PackHistoryCreateWithoutPackInput, PackHistoryUncheckedCreateWithoutPackInput> | PackHistoryCreateWithoutPackInput[] | PackHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PackHistoryCreateOrConnectWithoutPackInput | PackHistoryCreateOrConnectWithoutPackInput[]
    createMany?: PackHistoryCreateManyPackInputEnvelope
    connect?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
  }

  export type SmsHistoryCreateNestedManyWithoutPackInput = {
    create?: XOR<SmsHistoryCreateWithoutPackInput, SmsHistoryUncheckedCreateWithoutPackInput> | SmsHistoryCreateWithoutPackInput[] | SmsHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: SmsHistoryCreateOrConnectWithoutPackInput | SmsHistoryCreateOrConnectWithoutPackInput[]
    createMany?: SmsHistoryCreateManyPackInputEnvelope
    connect?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
  }

  export type PassengerUncheckedCreateNestedManyWithoutPackInput = {
    create?: XOR<PassengerCreateWithoutPackInput, PassengerUncheckedCreateWithoutPackInput> | PassengerCreateWithoutPackInput[] | PassengerUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutPackInput | PassengerCreateOrConnectWithoutPackInput[]
    createMany?: PassengerCreateManyPackInputEnvelope
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
  }

  export type FinalConfirmationUncheckedCreateNestedOneWithoutPackInput = {
    create?: XOR<FinalConfirmationCreateWithoutPackInput, FinalConfirmationUncheckedCreateWithoutPackInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutPackInput
    connect?: FinalConfirmationWhereUniqueInput
  }

  export type PackHistoryUncheckedCreateNestedManyWithoutPackInput = {
    create?: XOR<PackHistoryCreateWithoutPackInput, PackHistoryUncheckedCreateWithoutPackInput> | PackHistoryCreateWithoutPackInput[] | PackHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PackHistoryCreateOrConnectWithoutPackInput | PackHistoryCreateOrConnectWithoutPackInput[]
    createMany?: PackHistoryCreateManyPackInputEnvelope
    connect?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
  }

  export type SmsHistoryUncheckedCreateNestedManyWithoutPackInput = {
    create?: XOR<SmsHistoryCreateWithoutPackInput, SmsHistoryUncheckedCreateWithoutPackInput> | SmsHistoryCreateWithoutPackInput[] | SmsHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: SmsHistoryCreateOrConnectWithoutPackInput | SmsHistoryCreateOrConnectWithoutPackInput[]
    createMany?: SmsHistoryCreateManyPackInputEnvelope
    connect?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
  }

  export type EnumPackTypeFieldUpdateOperationsInput = {
    set?: $Enums.PackType
  }

  export type EnumPackStatusFieldUpdateOperationsInput = {
    set?: $Enums.PackStatus
  }

  export type PassengerUpdateManyWithoutPackNestedInput = {
    create?: XOR<PassengerCreateWithoutPackInput, PassengerUncheckedCreateWithoutPackInput> | PassengerCreateWithoutPackInput[] | PassengerUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutPackInput | PassengerCreateOrConnectWithoutPackInput[]
    upsert?: PassengerUpsertWithWhereUniqueWithoutPackInput | PassengerUpsertWithWhereUniqueWithoutPackInput[]
    createMany?: PassengerCreateManyPackInputEnvelope
    set?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    disconnect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    delete?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    update?: PassengerUpdateWithWhereUniqueWithoutPackInput | PassengerUpdateWithWhereUniqueWithoutPackInput[]
    updateMany?: PassengerUpdateManyWithWhereWithoutPackInput | PassengerUpdateManyWithWhereWithoutPackInput[]
    deleteMany?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
  }

  export type BusAssignmentUpdateOneWithoutPackNestedInput = {
    create?: XOR<BusAssignmentCreateWithoutPackInput, BusAssignmentUncheckedCreateWithoutPackInput>
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutPackInput
    upsert?: BusAssignmentUpsertWithoutPackInput
    disconnect?: BusAssignmentWhereInput | boolean
    delete?: BusAssignmentWhereInput | boolean
    connect?: BusAssignmentWhereUniqueInput
    update?: XOR<XOR<BusAssignmentUpdateToOneWithWhereWithoutPackInput, BusAssignmentUpdateWithoutPackInput>, BusAssignmentUncheckedUpdateWithoutPackInput>
  }

  export type FinalConfirmationUpdateOneWithoutPackNestedInput = {
    create?: XOR<FinalConfirmationCreateWithoutPackInput, FinalConfirmationUncheckedCreateWithoutPackInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutPackInput
    upsert?: FinalConfirmationUpsertWithoutPackInput
    disconnect?: FinalConfirmationWhereInput | boolean
    delete?: FinalConfirmationWhereInput | boolean
    connect?: FinalConfirmationWhereUniqueInput
    update?: XOR<XOR<FinalConfirmationUpdateToOneWithWhereWithoutPackInput, FinalConfirmationUpdateWithoutPackInput>, FinalConfirmationUncheckedUpdateWithoutPackInput>
  }

  export type PackHistoryUpdateManyWithoutPackNestedInput = {
    create?: XOR<PackHistoryCreateWithoutPackInput, PackHistoryUncheckedCreateWithoutPackInput> | PackHistoryCreateWithoutPackInput[] | PackHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PackHistoryCreateOrConnectWithoutPackInput | PackHistoryCreateOrConnectWithoutPackInput[]
    upsert?: PackHistoryUpsertWithWhereUniqueWithoutPackInput | PackHistoryUpsertWithWhereUniqueWithoutPackInput[]
    createMany?: PackHistoryCreateManyPackInputEnvelope
    set?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    disconnect?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    delete?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    connect?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    update?: PackHistoryUpdateWithWhereUniqueWithoutPackInput | PackHistoryUpdateWithWhereUniqueWithoutPackInput[]
    updateMany?: PackHistoryUpdateManyWithWhereWithoutPackInput | PackHistoryUpdateManyWithWhereWithoutPackInput[]
    deleteMany?: PackHistoryScalarWhereInput | PackHistoryScalarWhereInput[]
  }

  export type SmsHistoryUpdateManyWithoutPackNestedInput = {
    create?: XOR<SmsHistoryCreateWithoutPackInput, SmsHistoryUncheckedCreateWithoutPackInput> | SmsHistoryCreateWithoutPackInput[] | SmsHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: SmsHistoryCreateOrConnectWithoutPackInput | SmsHistoryCreateOrConnectWithoutPackInput[]
    upsert?: SmsHistoryUpsertWithWhereUniqueWithoutPackInput | SmsHistoryUpsertWithWhereUniqueWithoutPackInput[]
    createMany?: SmsHistoryCreateManyPackInputEnvelope
    set?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    disconnect?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    delete?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    connect?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    update?: SmsHistoryUpdateWithWhereUniqueWithoutPackInput | SmsHistoryUpdateWithWhereUniqueWithoutPackInput[]
    updateMany?: SmsHistoryUpdateManyWithWhereWithoutPackInput | SmsHistoryUpdateManyWithWhereWithoutPackInput[]
    deleteMany?: SmsHistoryScalarWhereInput | SmsHistoryScalarWhereInput[]
  }

  export type PassengerUncheckedUpdateManyWithoutPackNestedInput = {
    create?: XOR<PassengerCreateWithoutPackInput, PassengerUncheckedCreateWithoutPackInput> | PassengerCreateWithoutPackInput[] | PassengerUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutPackInput | PassengerCreateOrConnectWithoutPackInput[]
    upsert?: PassengerUpsertWithWhereUniqueWithoutPackInput | PassengerUpsertWithWhereUniqueWithoutPackInput[]
    createMany?: PassengerCreateManyPackInputEnvelope
    set?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    disconnect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    delete?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    update?: PassengerUpdateWithWhereUniqueWithoutPackInput | PassengerUpdateWithWhereUniqueWithoutPackInput[]
    updateMany?: PassengerUpdateManyWithWhereWithoutPackInput | PassengerUpdateManyWithWhereWithoutPackInput[]
    deleteMany?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
  }

  export type FinalConfirmationUncheckedUpdateOneWithoutPackNestedInput = {
    create?: XOR<FinalConfirmationCreateWithoutPackInput, FinalConfirmationUncheckedCreateWithoutPackInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutPackInput
    upsert?: FinalConfirmationUpsertWithoutPackInput
    disconnect?: FinalConfirmationWhereInput | boolean
    delete?: FinalConfirmationWhereInput | boolean
    connect?: FinalConfirmationWhereUniqueInput
    update?: XOR<XOR<FinalConfirmationUpdateToOneWithWhereWithoutPackInput, FinalConfirmationUpdateWithoutPackInput>, FinalConfirmationUncheckedUpdateWithoutPackInput>
  }

  export type PackHistoryUncheckedUpdateManyWithoutPackNestedInput = {
    create?: XOR<PackHistoryCreateWithoutPackInput, PackHistoryUncheckedCreateWithoutPackInput> | PackHistoryCreateWithoutPackInput[] | PackHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: PackHistoryCreateOrConnectWithoutPackInput | PackHistoryCreateOrConnectWithoutPackInput[]
    upsert?: PackHistoryUpsertWithWhereUniqueWithoutPackInput | PackHistoryUpsertWithWhereUniqueWithoutPackInput[]
    createMany?: PackHistoryCreateManyPackInputEnvelope
    set?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    disconnect?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    delete?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    connect?: PackHistoryWhereUniqueInput | PackHistoryWhereUniqueInput[]
    update?: PackHistoryUpdateWithWhereUniqueWithoutPackInput | PackHistoryUpdateWithWhereUniqueWithoutPackInput[]
    updateMany?: PackHistoryUpdateManyWithWhereWithoutPackInput | PackHistoryUpdateManyWithWhereWithoutPackInput[]
    deleteMany?: PackHistoryScalarWhereInput | PackHistoryScalarWhereInput[]
  }

  export type SmsHistoryUncheckedUpdateManyWithoutPackNestedInput = {
    create?: XOR<SmsHistoryCreateWithoutPackInput, SmsHistoryUncheckedCreateWithoutPackInput> | SmsHistoryCreateWithoutPackInput[] | SmsHistoryUncheckedCreateWithoutPackInput[]
    connectOrCreate?: SmsHistoryCreateOrConnectWithoutPackInput | SmsHistoryCreateOrConnectWithoutPackInput[]
    upsert?: SmsHistoryUpsertWithWhereUniqueWithoutPackInput | SmsHistoryUpsertWithWhereUniqueWithoutPackInput[]
    createMany?: SmsHistoryCreateManyPackInputEnvelope
    set?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    disconnect?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    delete?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    connect?: SmsHistoryWhereUniqueInput | SmsHistoryWhereUniqueInput[]
    update?: SmsHistoryUpdateWithWhereUniqueWithoutPackInput | SmsHistoryUpdateWithWhereUniqueWithoutPackInput[]
    updateMany?: SmsHistoryUpdateManyWithWhereWithoutPackInput | SmsHistoryUpdateManyWithWhereWithoutPackInput[]
    deleteMany?: SmsHistoryScalarWhereInput | SmsHistoryScalarWhereInput[]
  }

  export type PackCreateNestedOneWithoutBusAssignmentInput = {
    create?: XOR<PackCreateWithoutBusAssignmentInput, PackUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: PackCreateOrConnectWithoutBusAssignmentInput
    connect?: PackWhereUniqueInput
  }

  export type PassengerCreateNestedManyWithoutBusAssignmentInput = {
    create?: XOR<PassengerCreateWithoutBusAssignmentInput, PassengerUncheckedCreateWithoutBusAssignmentInput> | PassengerCreateWithoutBusAssignmentInput[] | PassengerUncheckedCreateWithoutBusAssignmentInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutBusAssignmentInput | PassengerCreateOrConnectWithoutBusAssignmentInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
  }

  export type FinalConfirmationCreateNestedOneWithoutBusAssignmentInput = {
    create?: XOR<FinalConfirmationCreateWithoutBusAssignmentInput, FinalConfirmationUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutBusAssignmentInput
    connect?: FinalConfirmationWhereUniqueInput
  }

  export type PackUncheckedCreateNestedOneWithoutBusAssignmentInput = {
    create?: XOR<PackCreateWithoutBusAssignmentInput, PackUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: PackCreateOrConnectWithoutBusAssignmentInput
    connect?: PackWhereUniqueInput
  }

  export type PassengerUncheckedCreateNestedManyWithoutBusAssignmentInput = {
    create?: XOR<PassengerCreateWithoutBusAssignmentInput, PassengerUncheckedCreateWithoutBusAssignmentInput> | PassengerCreateWithoutBusAssignmentInput[] | PassengerUncheckedCreateWithoutBusAssignmentInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutBusAssignmentInput | PassengerCreateOrConnectWithoutBusAssignmentInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
  }

  export type FinalConfirmationUncheckedCreateNestedOneWithoutBusAssignmentInput = {
    create?: XOR<FinalConfirmationCreateWithoutBusAssignmentInput, FinalConfirmationUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutBusAssignmentInput
    connect?: FinalConfirmationWhereUniqueInput
  }

  export type PackUpdateOneWithoutBusAssignmentNestedInput = {
    create?: XOR<PackCreateWithoutBusAssignmentInput, PackUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: PackCreateOrConnectWithoutBusAssignmentInput
    upsert?: PackUpsertWithoutBusAssignmentInput
    disconnect?: PackWhereInput | boolean
    delete?: PackWhereInput | boolean
    connect?: PackWhereUniqueInput
    update?: XOR<XOR<PackUpdateToOneWithWhereWithoutBusAssignmentInput, PackUpdateWithoutBusAssignmentInput>, PackUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type PassengerUpdateManyWithoutBusAssignmentNestedInput = {
    create?: XOR<PassengerCreateWithoutBusAssignmentInput, PassengerUncheckedCreateWithoutBusAssignmentInput> | PassengerCreateWithoutBusAssignmentInput[] | PassengerUncheckedCreateWithoutBusAssignmentInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutBusAssignmentInput | PassengerCreateOrConnectWithoutBusAssignmentInput[]
    upsert?: PassengerUpsertWithWhereUniqueWithoutBusAssignmentInput | PassengerUpsertWithWhereUniqueWithoutBusAssignmentInput[]
    set?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    disconnect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    delete?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    update?: PassengerUpdateWithWhereUniqueWithoutBusAssignmentInput | PassengerUpdateWithWhereUniqueWithoutBusAssignmentInput[]
    updateMany?: PassengerUpdateManyWithWhereWithoutBusAssignmentInput | PassengerUpdateManyWithWhereWithoutBusAssignmentInput[]
    deleteMany?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
  }

  export type FinalConfirmationUpdateOneWithoutBusAssignmentNestedInput = {
    create?: XOR<FinalConfirmationCreateWithoutBusAssignmentInput, FinalConfirmationUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutBusAssignmentInput
    upsert?: FinalConfirmationUpsertWithoutBusAssignmentInput
    disconnect?: FinalConfirmationWhereInput | boolean
    delete?: FinalConfirmationWhereInput | boolean
    connect?: FinalConfirmationWhereUniqueInput
    update?: XOR<XOR<FinalConfirmationUpdateToOneWithWhereWithoutBusAssignmentInput, FinalConfirmationUpdateWithoutBusAssignmentInput>, FinalConfirmationUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type PackUncheckedUpdateOneWithoutBusAssignmentNestedInput = {
    create?: XOR<PackCreateWithoutBusAssignmentInput, PackUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: PackCreateOrConnectWithoutBusAssignmentInput
    upsert?: PackUpsertWithoutBusAssignmentInput
    disconnect?: PackWhereInput | boolean
    delete?: PackWhereInput | boolean
    connect?: PackWhereUniqueInput
    update?: XOR<XOR<PackUpdateToOneWithWhereWithoutBusAssignmentInput, PackUpdateWithoutBusAssignmentInput>, PackUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type PassengerUncheckedUpdateManyWithoutBusAssignmentNestedInput = {
    create?: XOR<PassengerCreateWithoutBusAssignmentInput, PassengerUncheckedCreateWithoutBusAssignmentInput> | PassengerCreateWithoutBusAssignmentInput[] | PassengerUncheckedCreateWithoutBusAssignmentInput[]
    connectOrCreate?: PassengerCreateOrConnectWithoutBusAssignmentInput | PassengerCreateOrConnectWithoutBusAssignmentInput[]
    upsert?: PassengerUpsertWithWhereUniqueWithoutBusAssignmentInput | PassengerUpsertWithWhereUniqueWithoutBusAssignmentInput[]
    set?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    disconnect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    delete?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    connect?: PassengerWhereUniqueInput | PassengerWhereUniqueInput[]
    update?: PassengerUpdateWithWhereUniqueWithoutBusAssignmentInput | PassengerUpdateWithWhereUniqueWithoutBusAssignmentInput[]
    updateMany?: PassengerUpdateManyWithWhereWithoutBusAssignmentInput | PassengerUpdateManyWithWhereWithoutBusAssignmentInput[]
    deleteMany?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
  }

  export type FinalConfirmationUncheckedUpdateOneWithoutBusAssignmentNestedInput = {
    create?: XOR<FinalConfirmationCreateWithoutBusAssignmentInput, FinalConfirmationUncheckedCreateWithoutBusAssignmentInput>
    connectOrCreate?: FinalConfirmationCreateOrConnectWithoutBusAssignmentInput
    upsert?: FinalConfirmationUpsertWithoutBusAssignmentInput
    disconnect?: FinalConfirmationWhereInput | boolean
    delete?: FinalConfirmationWhereInput | boolean
    connect?: FinalConfirmationWhereUniqueInput
    update?: XOR<XOR<FinalConfirmationUpdateToOneWithWhereWithoutBusAssignmentInput, FinalConfirmationUpdateWithoutBusAssignmentInput>, FinalConfirmationUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type PackCreateNestedOneWithoutFinalConfirmationInput = {
    create?: XOR<PackCreateWithoutFinalConfirmationInput, PackUncheckedCreateWithoutFinalConfirmationInput>
    connectOrCreate?: PackCreateOrConnectWithoutFinalConfirmationInput
    connect?: PackWhereUniqueInput
  }

  export type BusAssignmentCreateNestedOneWithoutFinalConfirmationInput = {
    create?: XOR<BusAssignmentCreateWithoutFinalConfirmationInput, BusAssignmentUncheckedCreateWithoutFinalConfirmationInput>
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutFinalConfirmationInput
    connect?: BusAssignmentWhereUniqueInput
  }

  export type PackUpdateOneRequiredWithoutFinalConfirmationNestedInput = {
    create?: XOR<PackCreateWithoutFinalConfirmationInput, PackUncheckedCreateWithoutFinalConfirmationInput>
    connectOrCreate?: PackCreateOrConnectWithoutFinalConfirmationInput
    upsert?: PackUpsertWithoutFinalConfirmationInput
    connect?: PackWhereUniqueInput
    update?: XOR<XOR<PackUpdateToOneWithWhereWithoutFinalConfirmationInput, PackUpdateWithoutFinalConfirmationInput>, PackUncheckedUpdateWithoutFinalConfirmationInput>
  }

  export type BusAssignmentUpdateOneRequiredWithoutFinalConfirmationNestedInput = {
    create?: XOR<BusAssignmentCreateWithoutFinalConfirmationInput, BusAssignmentUncheckedCreateWithoutFinalConfirmationInput>
    connectOrCreate?: BusAssignmentCreateOrConnectWithoutFinalConfirmationInput
    upsert?: BusAssignmentUpsertWithoutFinalConfirmationInput
    connect?: BusAssignmentWhereUniqueInput
    update?: XOR<XOR<BusAssignmentUpdateToOneWithWhereWithoutFinalConfirmationInput, BusAssignmentUpdateWithoutFinalConfirmationInput>, BusAssignmentUncheckedUpdateWithoutFinalConfirmationInput>
  }

  export type PackCreateNestedOneWithoutSmsHistoryInput = {
    create?: XOR<PackCreateWithoutSmsHistoryInput, PackUncheckedCreateWithoutSmsHistoryInput>
    connectOrCreate?: PackCreateOrConnectWithoutSmsHistoryInput
    connect?: PackWhereUniqueInput
  }

  export type PackUpdateOneRequiredWithoutSmsHistoryNestedInput = {
    create?: XOR<PackCreateWithoutSmsHistoryInput, PackUncheckedCreateWithoutSmsHistoryInput>
    connectOrCreate?: PackCreateOrConnectWithoutSmsHistoryInput
    upsert?: PackUpsertWithoutSmsHistoryInput
    connect?: PackWhereUniqueInput
    update?: XOR<XOR<PackUpdateToOneWithWhereWithoutSmsHistoryInput, PackUpdateWithoutSmsHistoryInput>, PackUncheckedUpdateWithoutSmsHistoryInput>
  }

  export type PackCreateNestedOneWithoutHistoryInput = {
    create?: XOR<PackCreateWithoutHistoryInput, PackUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: PackCreateOrConnectWithoutHistoryInput
    connect?: PackWhereUniqueInput
  }

  export type PackUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<PackCreateWithoutHistoryInput, PackUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: PackCreateOrConnectWithoutHistoryInput
    upsert?: PackUpsertWithoutHistoryInput
    connect?: PackWhereUniqueInput
    update?: XOR<XOR<PackUpdateToOneWithWhereWithoutHistoryInput, PackUpdateWithoutHistoryInput>, PackUncheckedUpdateWithoutHistoryInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeFilter<$PrismaModel> | $Enums.PackType
  }

  export type NestedEnumPackStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PackStatus | EnumPackStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackStatusFilter<$PrismaModel> | $Enums.PackStatus
  }

  export type NestedEnumPackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeWithAggregatesFilter<$PrismaModel> | $Enums.PackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackTypeFilter<$PrismaModel>
    _max?: NestedEnumPackTypeFilter<$PrismaModel>
  }

  export type NestedEnumPackStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackStatus | EnumPackStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackStatus[] | ListEnumPackStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackStatusWithAggregatesFilter<$PrismaModel> | $Enums.PackStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackStatusFilter<$PrismaModel>
    _max?: NestedEnumPackStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PassengerCreateWithoutCreatedByInput = {
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdAt?: Date | string
    pack?: PackCreateNestedOneWithoutPassengersInput
    busAssignment?: BusAssignmentCreateNestedManyWithoutPassengersInput
  }

  export type PassengerUncheckedCreateWithoutCreatedByInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    packId?: number | null
    createdAt?: Date | string
    busAssignment?: BusAssignmentUncheckedCreateNestedManyWithoutPassengersInput
  }

  export type PassengerCreateOrConnectWithoutCreatedByInput = {
    where: PassengerWhereUniqueInput
    create: XOR<PassengerCreateWithoutCreatedByInput, PassengerUncheckedCreateWithoutCreatedByInput>
  }

  export type PassengerCreateManyCreatedByInputEnvelope = {
    data: PassengerCreateManyCreatedByInput | PassengerCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PassengerUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PassengerWhereUniqueInput
    update: XOR<PassengerUpdateWithoutCreatedByInput, PassengerUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PassengerCreateWithoutCreatedByInput, PassengerUncheckedCreateWithoutCreatedByInput>
  }

  export type PassengerUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PassengerWhereUniqueInput
    data: XOR<PassengerUpdateWithoutCreatedByInput, PassengerUncheckedUpdateWithoutCreatedByInput>
  }

  export type PassengerUpdateManyWithWhereWithoutCreatedByInput = {
    where: PassengerScalarWhereInput
    data: XOR<PassengerUpdateManyMutationInput, PassengerUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PassengerScalarWhereInput = {
    AND?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
    OR?: PassengerScalarWhereInput[]
    NOT?: PassengerScalarWhereInput | PassengerScalarWhereInput[]
    id?: IntFilter<"Passenger"> | number
    firstName?: StringNullableFilter<"Passenger"> | string | null
    lastName?: StringNullableFilter<"Passenger"> | string | null
    gender?: StringFilter<"Passenger"> | string
    phone?: StringFilter<"Passenger"> | string
    nationalCode?: StringFilter<"Passenger"> | string
    travelDate?: StringFilter<"Passenger"> | string
    returnDate?: StringNullableFilter<"Passenger"> | string | null
    birthDate?: StringFilter<"Passenger"> | string
    travelType?: StringFilter<"Passenger"> | string
    leaderName?: StringNullableFilter<"Passenger"> | string | null
    leaderPhone?: StringNullableFilter<"Passenger"> | string | null
    createdById?: IntFilter<"Passenger"> | number
    packId?: IntNullableFilter<"Passenger"> | number | null
    createdAt?: DateTimeFilter<"Passenger"> | Date | string
  }

  export type UserCreateWithoutPassengersInput = {
    username: string
    password: string
    role: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutPassengersInput = {
    id?: number
    username: string
    password: string
    role: string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutPassengersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPassengersInput, UserUncheckedCreateWithoutPassengersInput>
  }

  export type PackCreateWithoutPassengersInput = {
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    busAssignment?: BusAssignmentCreateNestedOneWithoutPackInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutPackInput
    history?: PackHistoryCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryCreateNestedManyWithoutPackInput
  }

  export type PackUncheckedCreateWithoutPassengersInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    busAssignmentId?: number | null
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutPackInput
    history?: PackHistoryUncheckedCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryUncheckedCreateNestedManyWithoutPackInput
  }

  export type PackCreateOrConnectWithoutPassengersInput = {
    where: PackWhereUniqueInput
    create: XOR<PackCreateWithoutPassengersInput, PackUncheckedCreateWithoutPassengersInput>
  }

  export type BusAssignmentCreateWithoutPassengersInput = {
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    pack?: PackCreateNestedOneWithoutBusAssignmentInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutBusAssignmentInput
  }

  export type BusAssignmentUncheckedCreateWithoutPassengersInput = {
    id?: number
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    pack?: PackUncheckedCreateNestedOneWithoutBusAssignmentInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutBusAssignmentInput
  }

  export type BusAssignmentCreateOrConnectWithoutPassengersInput = {
    where: BusAssignmentWhereUniqueInput
    create: XOR<BusAssignmentCreateWithoutPassengersInput, BusAssignmentUncheckedCreateWithoutPassengersInput>
  }

  export type UserUpsertWithoutPassengersInput = {
    update: XOR<UserUpdateWithoutPassengersInput, UserUncheckedUpdateWithoutPassengersInput>
    create: XOR<UserCreateWithoutPassengersInput, UserUncheckedCreateWithoutPassengersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPassengersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPassengersInput, UserUncheckedUpdateWithoutPassengersInput>
  }

  export type UserUpdateWithoutPassengersInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutPassengersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackUpsertWithoutPassengersInput = {
    update: XOR<PackUpdateWithoutPassengersInput, PackUncheckedUpdateWithoutPassengersInput>
    create: XOR<PackCreateWithoutPassengersInput, PackUncheckedCreateWithoutPassengersInput>
    where?: PackWhereInput
  }

  export type PackUpdateToOneWithWhereWithoutPassengersInput = {
    where?: PackWhereInput
    data: XOR<PackUpdateWithoutPassengersInput, PackUncheckedUpdateWithoutPassengersInput>
  }

  export type PackUpdateWithoutPassengersInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    busAssignment?: BusAssignmentUpdateOneWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutPackNestedInput
    history?: PackHistoryUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUpdateManyWithoutPackNestedInput
  }

  export type PackUncheckedUpdateWithoutPassengersInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    busAssignmentId?: NullableIntFieldUpdateOperationsInput | number | null
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutPackNestedInput
    history?: PackHistoryUncheckedUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUncheckedUpdateManyWithoutPackNestedInput
  }

  export type BusAssignmentUpsertWithWhereUniqueWithoutPassengersInput = {
    where: BusAssignmentWhereUniqueInput
    update: XOR<BusAssignmentUpdateWithoutPassengersInput, BusAssignmentUncheckedUpdateWithoutPassengersInput>
    create: XOR<BusAssignmentCreateWithoutPassengersInput, BusAssignmentUncheckedCreateWithoutPassengersInput>
  }

  export type BusAssignmentUpdateWithWhereUniqueWithoutPassengersInput = {
    where: BusAssignmentWhereUniqueInput
    data: XOR<BusAssignmentUpdateWithoutPassengersInput, BusAssignmentUncheckedUpdateWithoutPassengersInput>
  }

  export type BusAssignmentUpdateManyWithWhereWithoutPassengersInput = {
    where: BusAssignmentScalarWhereInput
    data: XOR<BusAssignmentUpdateManyMutationInput, BusAssignmentUncheckedUpdateManyWithoutPassengersInput>
  }

  export type BusAssignmentScalarWhereInput = {
    AND?: BusAssignmentScalarWhereInput | BusAssignmentScalarWhereInput[]
    OR?: BusAssignmentScalarWhereInput[]
    NOT?: BusAssignmentScalarWhereInput | BusAssignmentScalarWhereInput[]
    id?: IntFilter<"BusAssignment"> | number
    company?: StringFilter<"BusAssignment"> | string
    plate?: StringFilter<"BusAssignment"> | string
    driver?: StringFilter<"BusAssignment"> | string
    driverPhone?: StringFilter<"BusAssignment"> | string
    packId?: IntFilter<"BusAssignment"> | number
    travelDate?: DateTimeFilter<"BusAssignment"> | Date | string
    type?: EnumPackTypeFilter<"BusAssignment"> | $Enums.PackType
  }

  export type PassengerCreateWithoutPackInput = {
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPassengersInput
    busAssignment?: BusAssignmentCreateNestedManyWithoutPassengersInput
  }

  export type PassengerUncheckedCreateWithoutPackInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdById: number
    createdAt?: Date | string
    busAssignment?: BusAssignmentUncheckedCreateNestedManyWithoutPassengersInput
  }

  export type PassengerCreateOrConnectWithoutPackInput = {
    where: PassengerWhereUniqueInput
    create: XOR<PassengerCreateWithoutPackInput, PassengerUncheckedCreateWithoutPackInput>
  }

  export type PassengerCreateManyPackInputEnvelope = {
    data: PassengerCreateManyPackInput | PassengerCreateManyPackInput[]
    skipDuplicates?: boolean
  }

  export type BusAssignmentCreateWithoutPackInput = {
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    passengers?: PassengerCreateNestedManyWithoutBusAssignmentInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutBusAssignmentInput
  }

  export type BusAssignmentUncheckedCreateWithoutPackInput = {
    id?: number
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    passengers?: PassengerUncheckedCreateNestedManyWithoutBusAssignmentInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutBusAssignmentInput
  }

  export type BusAssignmentCreateOrConnectWithoutPackInput = {
    where: BusAssignmentWhereUniqueInput
    create: XOR<BusAssignmentCreateWithoutPackInput, BusAssignmentUncheckedCreateWithoutPackInput>
  }

  export type FinalConfirmationCreateWithoutPackInput = {
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
    busAssignment: BusAssignmentCreateNestedOneWithoutFinalConfirmationInput
  }

  export type FinalConfirmationUncheckedCreateWithoutPackInput = {
    id?: number
    busAssignmentId: number
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
  }

  export type FinalConfirmationCreateOrConnectWithoutPackInput = {
    where: FinalConfirmationWhereUniqueInput
    create: XOR<FinalConfirmationCreateWithoutPackInput, FinalConfirmationUncheckedCreateWithoutPackInput>
  }

  export type PackHistoryCreateWithoutPackInput = {
    status: string
    changedAt?: Date | string
  }

  export type PackHistoryUncheckedCreateWithoutPackInput = {
    id?: number
    status: string
    changedAt?: Date | string
  }

  export type PackHistoryCreateOrConnectWithoutPackInput = {
    where: PackHistoryWhereUniqueInput
    create: XOR<PackHistoryCreateWithoutPackInput, PackHistoryUncheckedCreateWithoutPackInput>
  }

  export type PackHistoryCreateManyPackInputEnvelope = {
    data: PackHistoryCreateManyPackInput | PackHistoryCreateManyPackInput[]
    skipDuplicates?: boolean
  }

  export type SmsHistoryCreateWithoutPackInput = {
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date | string
    status: string
    error?: string | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SmsHistoryUncheckedCreateWithoutPackInput = {
    id?: number
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date | string
    status: string
    error?: string | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SmsHistoryCreateOrConnectWithoutPackInput = {
    where: SmsHistoryWhereUniqueInput
    create: XOR<SmsHistoryCreateWithoutPackInput, SmsHistoryUncheckedCreateWithoutPackInput>
  }

  export type SmsHistoryCreateManyPackInputEnvelope = {
    data: SmsHistoryCreateManyPackInput | SmsHistoryCreateManyPackInput[]
    skipDuplicates?: boolean
  }

  export type PassengerUpsertWithWhereUniqueWithoutPackInput = {
    where: PassengerWhereUniqueInput
    update: XOR<PassengerUpdateWithoutPackInput, PassengerUncheckedUpdateWithoutPackInput>
    create: XOR<PassengerCreateWithoutPackInput, PassengerUncheckedCreateWithoutPackInput>
  }

  export type PassengerUpdateWithWhereUniqueWithoutPackInput = {
    where: PassengerWhereUniqueInput
    data: XOR<PassengerUpdateWithoutPackInput, PassengerUncheckedUpdateWithoutPackInput>
  }

  export type PassengerUpdateManyWithWhereWithoutPackInput = {
    where: PassengerScalarWhereInput
    data: XOR<PassengerUpdateManyMutationInput, PassengerUncheckedUpdateManyWithoutPackInput>
  }

  export type BusAssignmentUpsertWithoutPackInput = {
    update: XOR<BusAssignmentUpdateWithoutPackInput, BusAssignmentUncheckedUpdateWithoutPackInput>
    create: XOR<BusAssignmentCreateWithoutPackInput, BusAssignmentUncheckedCreateWithoutPackInput>
    where?: BusAssignmentWhereInput
  }

  export type BusAssignmentUpdateToOneWithWhereWithoutPackInput = {
    where?: BusAssignmentWhereInput
    data: XOR<BusAssignmentUpdateWithoutPackInput, BusAssignmentUncheckedUpdateWithoutPackInput>
  }

  export type BusAssignmentUpdateWithoutPackInput = {
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    passengers?: PassengerUpdateManyWithoutBusAssignmentNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutBusAssignmentNestedInput
  }

  export type BusAssignmentUncheckedUpdateWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    passengers?: PassengerUncheckedUpdateManyWithoutBusAssignmentNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutBusAssignmentNestedInput
  }

  export type FinalConfirmationUpsertWithoutPackInput = {
    update: XOR<FinalConfirmationUpdateWithoutPackInput, FinalConfirmationUncheckedUpdateWithoutPackInput>
    create: XOR<FinalConfirmationCreateWithoutPackInput, FinalConfirmationUncheckedCreateWithoutPackInput>
    where?: FinalConfirmationWhereInput
  }

  export type FinalConfirmationUpdateToOneWithWhereWithoutPackInput = {
    where?: FinalConfirmationWhereInput
    data: XOR<FinalConfirmationUpdateWithoutPackInput, FinalConfirmationUncheckedUpdateWithoutPackInput>
  }

  export type FinalConfirmationUpdateWithoutPackInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    busAssignment?: BusAssignmentUpdateOneRequiredWithoutFinalConfirmationNestedInput
  }

  export type FinalConfirmationUncheckedUpdateWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    busAssignmentId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryUpsertWithWhereUniqueWithoutPackInput = {
    where: PackHistoryWhereUniqueInput
    update: XOR<PackHistoryUpdateWithoutPackInput, PackHistoryUncheckedUpdateWithoutPackInput>
    create: XOR<PackHistoryCreateWithoutPackInput, PackHistoryUncheckedCreateWithoutPackInput>
  }

  export type PackHistoryUpdateWithWhereUniqueWithoutPackInput = {
    where: PackHistoryWhereUniqueInput
    data: XOR<PackHistoryUpdateWithoutPackInput, PackHistoryUncheckedUpdateWithoutPackInput>
  }

  export type PackHistoryUpdateManyWithWhereWithoutPackInput = {
    where: PackHistoryScalarWhereInput
    data: XOR<PackHistoryUpdateManyMutationInput, PackHistoryUncheckedUpdateManyWithoutPackInput>
  }

  export type PackHistoryScalarWhereInput = {
    AND?: PackHistoryScalarWhereInput | PackHistoryScalarWhereInput[]
    OR?: PackHistoryScalarWhereInput[]
    NOT?: PackHistoryScalarWhereInput | PackHistoryScalarWhereInput[]
    id?: IntFilter<"PackHistory"> | number
    packId?: IntFilter<"PackHistory"> | number
    status?: StringFilter<"PackHistory"> | string
    changedAt?: DateTimeFilter<"PackHistory"> | Date | string
  }

  export type SmsHistoryUpsertWithWhereUniqueWithoutPackInput = {
    where: SmsHistoryWhereUniqueInput
    update: XOR<SmsHistoryUpdateWithoutPackInput, SmsHistoryUncheckedUpdateWithoutPackInput>
    create: XOR<SmsHistoryCreateWithoutPackInput, SmsHistoryUncheckedCreateWithoutPackInput>
  }

  export type SmsHistoryUpdateWithWhereUniqueWithoutPackInput = {
    where: SmsHistoryWhereUniqueInput
    data: XOR<SmsHistoryUpdateWithoutPackInput, SmsHistoryUncheckedUpdateWithoutPackInput>
  }

  export type SmsHistoryUpdateManyWithWhereWithoutPackInput = {
    where: SmsHistoryScalarWhereInput
    data: XOR<SmsHistoryUpdateManyMutationInput, SmsHistoryUncheckedUpdateManyWithoutPackInput>
  }

  export type SmsHistoryScalarWhereInput = {
    AND?: SmsHistoryScalarWhereInput | SmsHistoryScalarWhereInput[]
    OR?: SmsHistoryScalarWhereInput[]
    NOT?: SmsHistoryScalarWhereInput | SmsHistoryScalarWhereInput[]
    id?: IntFilter<"SmsHistory"> | number
    packId?: IntFilter<"SmsHistory"> | number
    recipientPhone?: StringFilter<"SmsHistory"> | string
    recipientType?: StringFilter<"SmsHistory"> | string
    text?: StringFilter<"SmsHistory"> | string
    sentAt?: DateTimeFilter<"SmsHistory"> | Date | string
    status?: StringFilter<"SmsHistory"> | string
    error?: StringNullableFilter<"SmsHistory"> | string | null
    createdBy?: IntFilter<"SmsHistory"> | number
    createdAt?: DateTimeFilter<"SmsHistory"> | Date | string
    updatedAt?: DateTimeFilter<"SmsHistory"> | Date | string
  }

  export type PackCreateWithoutBusAssignmentInput = {
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerCreateNestedManyWithoutPackInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutPackInput
    history?: PackHistoryCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryCreateNestedManyWithoutPackInput
  }

  export type PackUncheckedCreateWithoutBusAssignmentInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerUncheckedCreateNestedManyWithoutPackInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutPackInput
    history?: PackHistoryUncheckedCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryUncheckedCreateNestedManyWithoutPackInput
  }

  export type PackCreateOrConnectWithoutBusAssignmentInput = {
    where: PackWhereUniqueInput
    create: XOR<PackCreateWithoutBusAssignmentInput, PackUncheckedCreateWithoutBusAssignmentInput>
  }

  export type PassengerCreateWithoutBusAssignmentInput = {
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPassengersInput
    pack?: PackCreateNestedOneWithoutPassengersInput
  }

  export type PassengerUncheckedCreateWithoutBusAssignmentInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdById: number
    packId?: number | null
    createdAt?: Date | string
  }

  export type PassengerCreateOrConnectWithoutBusAssignmentInput = {
    where: PassengerWhereUniqueInput
    create: XOR<PassengerCreateWithoutBusAssignmentInput, PassengerUncheckedCreateWithoutBusAssignmentInput>
  }

  export type FinalConfirmationCreateWithoutBusAssignmentInput = {
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
    pack: PackCreateNestedOneWithoutFinalConfirmationInput
  }

  export type FinalConfirmationUncheckedCreateWithoutBusAssignmentInput = {
    id?: number
    packId: number
    travelDate: Date | string
    type: $Enums.PackType
    company: string
    plate: string
    driver: string
    driverPhone: string
    confirmationDate?: Date | string
  }

  export type FinalConfirmationCreateOrConnectWithoutBusAssignmentInput = {
    where: FinalConfirmationWhereUniqueInput
    create: XOR<FinalConfirmationCreateWithoutBusAssignmentInput, FinalConfirmationUncheckedCreateWithoutBusAssignmentInput>
  }

  export type PackUpsertWithoutBusAssignmentInput = {
    update: XOR<PackUpdateWithoutBusAssignmentInput, PackUncheckedUpdateWithoutBusAssignmentInput>
    create: XOR<PackCreateWithoutBusAssignmentInput, PackUncheckedCreateWithoutBusAssignmentInput>
    where?: PackWhereInput
  }

  export type PackUpdateToOneWithWhereWithoutBusAssignmentInput = {
    where?: PackWhereInput
    data: XOR<PackUpdateWithoutBusAssignmentInput, PackUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type PackUpdateWithoutBusAssignmentInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUpdateManyWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutPackNestedInput
    history?: PackHistoryUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUpdateManyWithoutPackNestedInput
  }

  export type PackUncheckedUpdateWithoutBusAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUncheckedUpdateManyWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutPackNestedInput
    history?: PackHistoryUncheckedUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUncheckedUpdateManyWithoutPackNestedInput
  }

  export type PassengerUpsertWithWhereUniqueWithoutBusAssignmentInput = {
    where: PassengerWhereUniqueInput
    update: XOR<PassengerUpdateWithoutBusAssignmentInput, PassengerUncheckedUpdateWithoutBusAssignmentInput>
    create: XOR<PassengerCreateWithoutBusAssignmentInput, PassengerUncheckedCreateWithoutBusAssignmentInput>
  }

  export type PassengerUpdateWithWhereUniqueWithoutBusAssignmentInput = {
    where: PassengerWhereUniqueInput
    data: XOR<PassengerUpdateWithoutBusAssignmentInput, PassengerUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type PassengerUpdateManyWithWhereWithoutBusAssignmentInput = {
    where: PassengerScalarWhereInput
    data: XOR<PassengerUpdateManyMutationInput, PassengerUncheckedUpdateManyWithoutBusAssignmentInput>
  }

  export type FinalConfirmationUpsertWithoutBusAssignmentInput = {
    update: XOR<FinalConfirmationUpdateWithoutBusAssignmentInput, FinalConfirmationUncheckedUpdateWithoutBusAssignmentInput>
    create: XOR<FinalConfirmationCreateWithoutBusAssignmentInput, FinalConfirmationUncheckedCreateWithoutBusAssignmentInput>
    where?: FinalConfirmationWhereInput
  }

  export type FinalConfirmationUpdateToOneWithWhereWithoutBusAssignmentInput = {
    where?: FinalConfirmationWhereInput
    data: XOR<FinalConfirmationUpdateWithoutBusAssignmentInput, FinalConfirmationUncheckedUpdateWithoutBusAssignmentInput>
  }

  export type FinalConfirmationUpdateWithoutBusAssignmentInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    pack?: PackUpdateOneRequiredWithoutFinalConfirmationNestedInput
  }

  export type FinalConfirmationUncheckedUpdateWithoutBusAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    confirmationDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackCreateWithoutFinalConfirmationInput = {
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerCreateNestedManyWithoutPackInput
    busAssignment?: BusAssignmentCreateNestedOneWithoutPackInput
    history?: PackHistoryCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryCreateNestedManyWithoutPackInput
  }

  export type PackUncheckedCreateWithoutFinalConfirmationInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    busAssignmentId?: number | null
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerUncheckedCreateNestedManyWithoutPackInput
    history?: PackHistoryUncheckedCreateNestedManyWithoutPackInput
    smsHistory?: SmsHistoryUncheckedCreateNestedManyWithoutPackInput
  }

  export type PackCreateOrConnectWithoutFinalConfirmationInput = {
    where: PackWhereUniqueInput
    create: XOR<PackCreateWithoutFinalConfirmationInput, PackUncheckedCreateWithoutFinalConfirmationInput>
  }

  export type BusAssignmentCreateWithoutFinalConfirmationInput = {
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    pack?: PackCreateNestedOneWithoutBusAssignmentInput
    passengers?: PassengerCreateNestedManyWithoutBusAssignmentInput
  }

  export type BusAssignmentUncheckedCreateWithoutFinalConfirmationInput = {
    id?: number
    company: string
    plate: string
    driver: string
    driverPhone: string
    packId: number
    travelDate?: Date | string
    type?: $Enums.PackType
    pack?: PackUncheckedCreateNestedOneWithoutBusAssignmentInput
    passengers?: PassengerUncheckedCreateNestedManyWithoutBusAssignmentInput
  }

  export type BusAssignmentCreateOrConnectWithoutFinalConfirmationInput = {
    where: BusAssignmentWhereUniqueInput
    create: XOR<BusAssignmentCreateWithoutFinalConfirmationInput, BusAssignmentUncheckedCreateWithoutFinalConfirmationInput>
  }

  export type PackUpsertWithoutFinalConfirmationInput = {
    update: XOR<PackUpdateWithoutFinalConfirmationInput, PackUncheckedUpdateWithoutFinalConfirmationInput>
    create: XOR<PackCreateWithoutFinalConfirmationInput, PackUncheckedCreateWithoutFinalConfirmationInput>
    where?: PackWhereInput
  }

  export type PackUpdateToOneWithWhereWithoutFinalConfirmationInput = {
    where?: PackWhereInput
    data: XOR<PackUpdateWithoutFinalConfirmationInput, PackUncheckedUpdateWithoutFinalConfirmationInput>
  }

  export type PackUpdateWithoutFinalConfirmationInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUpdateManyWithoutPackNestedInput
    busAssignment?: BusAssignmentUpdateOneWithoutPackNestedInput
    history?: PackHistoryUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUpdateManyWithoutPackNestedInput
  }

  export type PackUncheckedUpdateWithoutFinalConfirmationInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    busAssignmentId?: NullableIntFieldUpdateOperationsInput | number | null
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUncheckedUpdateManyWithoutPackNestedInput
    history?: PackHistoryUncheckedUpdateManyWithoutPackNestedInput
    smsHistory?: SmsHistoryUncheckedUpdateManyWithoutPackNestedInput
  }

  export type BusAssignmentUpsertWithoutFinalConfirmationInput = {
    update: XOR<BusAssignmentUpdateWithoutFinalConfirmationInput, BusAssignmentUncheckedUpdateWithoutFinalConfirmationInput>
    create: XOR<BusAssignmentCreateWithoutFinalConfirmationInput, BusAssignmentUncheckedCreateWithoutFinalConfirmationInput>
    where?: BusAssignmentWhereInput
  }

  export type BusAssignmentUpdateToOneWithWhereWithoutFinalConfirmationInput = {
    where?: BusAssignmentWhereInput
    data: XOR<BusAssignmentUpdateWithoutFinalConfirmationInput, BusAssignmentUncheckedUpdateWithoutFinalConfirmationInput>
  }

  export type BusAssignmentUpdateWithoutFinalConfirmationInput = {
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    pack?: PackUpdateOneWithoutBusAssignmentNestedInput
    passengers?: PassengerUpdateManyWithoutBusAssignmentNestedInput
  }

  export type BusAssignmentUncheckedUpdateWithoutFinalConfirmationInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    pack?: PackUncheckedUpdateOneWithoutBusAssignmentNestedInput
    passengers?: PassengerUncheckedUpdateManyWithoutBusAssignmentNestedInput
  }

  export type PackCreateWithoutSmsHistoryInput = {
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerCreateNestedManyWithoutPackInput
    busAssignment?: BusAssignmentCreateNestedOneWithoutPackInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutPackInput
    history?: PackHistoryCreateNestedManyWithoutPackInput
  }

  export type PackUncheckedCreateWithoutSmsHistoryInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    busAssignmentId?: number | null
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerUncheckedCreateNestedManyWithoutPackInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutPackInput
    history?: PackHistoryUncheckedCreateNestedManyWithoutPackInput
  }

  export type PackCreateOrConnectWithoutSmsHistoryInput = {
    where: PackWhereUniqueInput
    create: XOR<PackCreateWithoutSmsHistoryInput, PackUncheckedCreateWithoutSmsHistoryInput>
  }

  export type PackUpsertWithoutSmsHistoryInput = {
    update: XOR<PackUpdateWithoutSmsHistoryInput, PackUncheckedUpdateWithoutSmsHistoryInput>
    create: XOR<PackCreateWithoutSmsHistoryInput, PackUncheckedCreateWithoutSmsHistoryInput>
    where?: PackWhereInput
  }

  export type PackUpdateToOneWithWhereWithoutSmsHistoryInput = {
    where?: PackWhereInput
    data: XOR<PackUpdateWithoutSmsHistoryInput, PackUncheckedUpdateWithoutSmsHistoryInput>
  }

  export type PackUpdateWithoutSmsHistoryInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUpdateManyWithoutPackNestedInput
    busAssignment?: BusAssignmentUpdateOneWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutPackNestedInput
    history?: PackHistoryUpdateManyWithoutPackNestedInput
  }

  export type PackUncheckedUpdateWithoutSmsHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    busAssignmentId?: NullableIntFieldUpdateOperationsInput | number | null
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUncheckedUpdateManyWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutPackNestedInput
    history?: PackHistoryUncheckedUpdateManyWithoutPackNestedInput
  }

  export type PackCreateWithoutHistoryInput = {
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerCreateNestedManyWithoutPackInput
    busAssignment?: BusAssignmentCreateNestedOneWithoutPackInput
    finalConfirmation?: FinalConfirmationCreateNestedOneWithoutPackInput
    smsHistory?: SmsHistoryCreateNestedManyWithoutPackInput
  }

  export type PackUncheckedCreateWithoutHistoryInput = {
    id?: number
    travelDate: Date | string
    type?: $Enums.PackType
    repository?: number
    status?: $Enums.PackStatus
    busAssignmentId?: number | null
    finalConfirmationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengers?: PassengerUncheckedCreateNestedManyWithoutPackInput
    finalConfirmation?: FinalConfirmationUncheckedCreateNestedOneWithoutPackInput
    smsHistory?: SmsHistoryUncheckedCreateNestedManyWithoutPackInput
  }

  export type PackCreateOrConnectWithoutHistoryInput = {
    where: PackWhereUniqueInput
    create: XOR<PackCreateWithoutHistoryInput, PackUncheckedCreateWithoutHistoryInput>
  }

  export type PackUpsertWithoutHistoryInput = {
    update: XOR<PackUpdateWithoutHistoryInput, PackUncheckedUpdateWithoutHistoryInput>
    create: XOR<PackCreateWithoutHistoryInput, PackUncheckedCreateWithoutHistoryInput>
    where?: PackWhereInput
  }

  export type PackUpdateToOneWithWhereWithoutHistoryInput = {
    where?: PackWhereInput
    data: XOR<PackUpdateWithoutHistoryInput, PackUncheckedUpdateWithoutHistoryInput>
  }

  export type PackUpdateWithoutHistoryInput = {
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUpdateManyWithoutPackNestedInput
    busAssignment?: BusAssignmentUpdateOneWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutPackNestedInput
    smsHistory?: SmsHistoryUpdateManyWithoutPackNestedInput
  }

  export type PackUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    repository?: IntFieldUpdateOperationsInput | number
    status?: EnumPackStatusFieldUpdateOperationsInput | $Enums.PackStatus
    busAssignmentId?: NullableIntFieldUpdateOperationsInput | number | null
    finalConfirmationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengers?: PassengerUncheckedUpdateManyWithoutPackNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutPackNestedInput
    smsHistory?: SmsHistoryUncheckedUpdateManyWithoutPackNestedInput
  }

  export type PassengerCreateManyCreatedByInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    packId?: number | null
    createdAt?: Date | string
  }

  export type PassengerUpdateWithoutCreatedByInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pack?: PackUpdateOneWithoutPassengersNestedInput
    busAssignment?: BusAssignmentUpdateManyWithoutPassengersNestedInput
  }

  export type PassengerUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    packId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    busAssignment?: BusAssignmentUncheckedUpdateManyWithoutPassengersNestedInput
  }

  export type PassengerUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    packId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusAssignmentUpdateWithoutPassengersInput = {
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    pack?: PackUpdateOneWithoutBusAssignmentNestedInput
    finalConfirmation?: FinalConfirmationUpdateOneWithoutBusAssignmentNestedInput
  }

  export type BusAssignmentUncheckedUpdateWithoutPassengersInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    pack?: PackUncheckedUpdateOneWithoutBusAssignmentNestedInput
    finalConfirmation?: FinalConfirmationUncheckedUpdateOneWithoutBusAssignmentNestedInput
  }

  export type BusAssignmentUncheckedUpdateManyWithoutPassengersInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    plate?: StringFieldUpdateOperationsInput | string
    driver?: StringFieldUpdateOperationsInput | string
    driverPhone?: StringFieldUpdateOperationsInput | string
    packId?: IntFieldUpdateOperationsInput | number
    travelDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
  }

  export type PassengerCreateManyPackInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    gender: string
    phone: string
    nationalCode: string
    travelDate: string
    returnDate?: string | null
    birthDate: string
    travelType: string
    leaderName?: string | null
    leaderPhone?: string | null
    createdById: number
    createdAt?: Date | string
  }

  export type PackHistoryCreateManyPackInput = {
    id?: number
    status: string
    changedAt?: Date | string
  }

  export type SmsHistoryCreateManyPackInput = {
    id?: number
    recipientPhone: string
    recipientType: string
    text: string
    sentAt: Date | string
    status: string
    error?: string | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassengerUpdateWithoutPackInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPassengersNestedInput
    busAssignment?: BusAssignmentUpdateManyWithoutPassengersNestedInput
  }

  export type PassengerUncheckedUpdateWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    busAssignment?: BusAssignmentUncheckedUpdateManyWithoutPassengersNestedInput
  }

  export type PassengerUncheckedUpdateManyWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryUpdateWithoutPackInput = {
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryUncheckedUpdateWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackHistoryUncheckedUpdateManyWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmsHistoryUpdateWithoutPackInput = {
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmsHistoryUncheckedUpdateWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SmsHistoryUncheckedUpdateManyWithoutPackInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipientPhone?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassengerUpdateWithoutBusAssignmentInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPassengersNestedInput
    pack?: PackUpdateOneWithoutPassengersNestedInput
  }

  export type PassengerUncheckedUpdateWithoutBusAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    packId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassengerUncheckedUpdateManyWithoutBusAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    nationalCode?: StringFieldUpdateOperationsInput | string
    travelDate?: StringFieldUpdateOperationsInput | string
    returnDate?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: StringFieldUpdateOperationsInput | string
    travelType?: StringFieldUpdateOperationsInput | string
    leaderName?: NullableStringFieldUpdateOperationsInput | string | null
    leaderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    packId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
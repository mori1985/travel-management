generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  password   String
  role       String // 'level1', 'level2', 'admin'
  createdAt  DateTime    @default(now())
  passengers Passenger[]
}

model Passenger {
  id            Int             @id @default(autoincrement())
  firstName     String?
  lastName      String?
  gender        String
  phone         String
  nationalCode  String          @unique // ? حذف شده
  travelDate    String
  returnDate    String?
  birthDate     String
  travelType    String // 'normal', 'vip'
  leaderName    String?
  leaderPhone   String?
  createdById   Int
  createdBy     User            @relation(fields: [createdById], references: [id])
  packId        Int?
  pack          Pack?           @relation(fields: [packId], references: [id])
  createdAt     DateTime        @default(now())
  busAssignment BusAssignment[]

  @@index([travelDate])
}

model Pack {
  id                  Int                @id @default(autoincrement())
  travelDate          DateTime
  type                PackType           @default(normal)
  repository          Int                @default(1) // 1, 2, 3
  status              PackStatus         @default(pending) // اضافه کردن مقدار پیش‌فرض
  passengers          Passenger[]
  busAssignment       BusAssignment?     @relation(fields: [busAssignmentId], references: [id]) // مشخص کردن رابطه
  busAssignmentId     Int?               @unique
  finalConfirmation   FinalConfirmation? @relation // فقط @relation
  finalConfirmationId Int?               @unique
  history             PackHistory[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt
  smsHistory          SmsHistory[]

  @@index([travelDate])
  @@index([status])
}

model BusAssignment {
  id                Int                @id @default(autoincrement())
  company           String // ? حذف شده
  plate             String // ? حذف شده
  driver            String // ? حذف شده
  driverPhone       String // ? حذف شده
  packId            Int                @unique
  pack              Pack?              @relation
  travelDate        DateTime           @default(now())
  type              PackType           @default(normal)
  passengers        Passenger[]
  finalConfirmation FinalConfirmation?
}

model FinalConfirmation {
  id               Int           @id @default(autoincrement())
  packId           Int           @unique
  busAssignmentId  Int           @unique
  travelDate       DateTime
  type             PackType
  company          String
  plate            String
  driver           String
  driverPhone      String
  confirmationDate DateTime      @default(now())
  pack             Pack          @relation(fields: [packId], references: [id], onDelete: Cascade) // مشخص کردن رابطه
  busAssignment    BusAssignment @relation(fields: [busAssignmentId], references: [id])

  @@index([packId])
  @@index([busAssignmentId])
}

model SmsHistory {
  id             Int      @id @default(autoincrement())
  packId         Int
  recipientPhone String
  recipientType  String
  text           String
  sentAt         DateTime
  status         String
  error          String? // برای ذخیره پیام خطا (اضافه شده)
  createdBy      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  pack           Pack     @relation(fields: [packId], references: [id])
}

model PackHistory {
  id        Int      @id @default(autoincrement())
  packId    Int
  status    String
  changedAt DateTime @default(now())
  pack      Pack     @relation(fields: [packId], references: [id], onDelete: Cascade)
}

model ArchivedPack {
  id            Int        @id @default(autoincrement())
  packId        Int        @unique
  travelDate    DateTime
  type          PackType
  repository    Int
  status        PackStatus
  passengers    Json // ذخیره مسافران به صورت JSON
  busAssignment Json? // ذخیره اطلاعات اتوبوس به صورت JSON
  createdAt     DateTime
  updatedAt     DateTime
  archivedAt    DateTime   @default(now())
}

enum PackType {
  normal
  vip
}

enum PackStatus {
  pending
  assigned
  confirmed
}
